------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------
--CUSTOMER ENTITIES-----------------------------------------------------------------------
------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------

--COUNTRY_CODES:
 CREATE TABLE COUNTRY_CODES
   (
	ALPHA_CODE_2	 CHAR(2) NOT NULL,	   --IL	
   ALPHA_CODE_3 CHAR(3),			--ISR
   NUMERIC_CODE	   NUMBER,			--972
	LABEL XMLTYPE, 
	DESCRIPTION XMLTYPE, 
	SORTKEY NUMBER
   );
   
   CREATE UNIQUE INDEX COUNTRY_CODES_PK ON COUNTRY_CODES (ALPHA_CODE_2);
   ALTER TABLE COUNTRY_CODES ADD CONSTRAINT COUNTRY_CODES_PK PRIMARY KEY (ALPHA_CODE_2);
   
--REGIONS:
 CREATE TABLE REGIONS
   (
   REGION_ID  RAW(16) DEFAULT SYS_GUID() NOT NULL, 
	LABEL XMLTYPE, 
	DESCRIPTION XMLTYPE, 
  BOUNDS	   FLOAT,
  GEOGRAPHY		  FLOAT,
  LOCALE_ID			 CHAR(6),	--FK TO LOCALES TABLE 
  COUNTRY_CODE CHAR(2),		--FK TO COUNTRY_CODES 
   STATE_CODE	 CHAR(3)
   );
   
   CREATE UNIQUE INDEX REGIONS_PK ON REGIONS (REGION_ID);
   ALTER TABLE REGIONS ADD CONSTRAINT REGIONS_PK PRIMARY KEY (REGION_ID);
   
   ALTER TABLE REGIONS ADD CONSTRAINT FK_RGN_COUNTR FOREIGN KEY (COUNTRY_CODE) REFERENCES COUNTRY_CODES(ALPHA_CODE_2);
   
--DB_SOURCES:
CREATE TABLE DB_SOURCES(
	CODE	  CHAR(6) NOT NULL,
	TEXT	 NVARCHAR2(256),
	SORTKEY	 NUMBER
  );
  
	 CREATE UNIQUE INDEX DB_SOURCES_PK ON DB_SOURCES (CODE);
   ALTER TABLE DB_SOURCES ADD CONSTRAINT DB_SOURCES_PK PRIMARY KEY (CODE);

   --RESOURCES:
  CREATE TABLE RESOURCES
   (	
   RESOURCE_ID	RAW(16) DEFAULT SYS_GUID() NOT NULL, 
   RESOURCE_LINK   VARCHAR2(1024),
   RESOURCE_DATA	 BLOB,
   LABEL XMLTYPE, 
	  DESCRIPTION XMLTYPE,
  DB_SOURCE CHAR(6),		 --FK TO DB_SOURCES
	DB_VERSION VARCHAR2(32), 
	DB_DELETED VARCHAR2(1) DEFAULT '0'
   )  ;

  CREATE UNIQUE INDEX RESOURCES_PK ON RESOURCES (RESOURCE_ID)  ;
   ALTER TABLE RESOURCES ADD CONSTRAINT RESOURCES_PK PRIMARY KEY (RESOURCE_ID);
   
   ALTER TABLE RESOURCES ADD CONSTRAINT FK_RSRC_DBSRC FOREIGN KEY (DB_SOURCE) REFERENCES DB_SOURCES(CODE);
   
--OPERATORS:
CREATE TABLE OPERATORS
(
	OPERATOR_ID		RAW(16) DEFAULT SYS_GUID() NOT NULL,
  PARENT_ID	   RAW(16),		 --FK TO OPERATORS
	REGION_ID RAW(16),		 --FK TO REGIONS
	LOCALE_ID CHAR(6),	
	OPERATOR_NAME  NVARCHAR2(256),
	DESCRIPTION NVARCHAR2(2000),
	CURRENCY_CODE  CHAR(3),
	CURRENCY_FORMAT NVARCHAR2(64),
	DATE_FORMAT VARCHAR2(64),
	TIME_FORMAT VARCHAR2(64)
  );
  
  
	CREATE UNIQUE INDEX OPR_PK ON OPERATORS (OPERATOR_ID)  ;
   ALTER TABLE OPERATORS ADD CONSTRAINT OPERATORS_PK PRIMARY KEY (OPERATOR_ID);
  
  ALTER TABLE OPERATORS ADD CONSTRAINT FK_OPR_OPR FOREIGN KEY (PARENT_ID) REFERENCES OPERATORS(OPERATOR_ID);
  ALTER TABLE OPERATORS ADD CONSTRAINT FK_OPR_RGN FOREIGN KEY (REGION_ID) REFERENCES REGIONS(REGION_ID);

--ACCOUNT_TYPES: 
 CREATE TABLE ACCOUNT_TYPES
   (
   CODE	 CHAR(6) NOT NULL, 
	LABEL XMLTYPE, 
	DESCRIPTION XMLTYPE, 
	SORTKEY NUMBER
   );
   
   CREATE UNIQUE INDEX ACCOUNT_TYPES_PK ON ACCOUNT_TYPES (CODE);
   ALTER TABLE ACCOUNT_TYPES ADD CONSTRAINT ACCOUNT_TYPES_PK PRIMARY KEY (CODE);
   
   
--ACCOUNTS:
  CREATE TABLE ACCOUNTS
   (	
   ACCOUNT_ID  RAW(16) DEFAULT SYS_GUID() NOT NULL, 
	ACCOUNT_NUMBER VARCHAR2(64), 
	ACCOUNT_TYPE CHAR(6),	  --FK TO ACCOUNT_TYPES
	OPERATOR_ID RAW(16),		--FK TO OPERATORS 
	PARENT_ID RAW(16),						 --FK TO ACCOUNTS
	ACCOUNT_NAME  NVARCHAR2(256),	  --RENAMED FROM NAME 
	DESCRIPTION NVARCHAR2(2000), 
	CREATED_BY VARCHAR2(64), 
	CREATED_ON TIMESTAMP(7) WITH TIME ZONE, 
	MODIFIED_BY VARCHAR2(64), 
	MODIFIED_ON TIMESTAMP(7) WITH TIME ZONE, 
	DB_SOURCE CHAR(6),	   --FK TO DB_SOURCES
	DB_VERSION VARCHAR2(32), 
	DB_DELETED VARCHAR2(1)  DEFAULT '0'
   )  ;

  CREATE UNIQUE INDEX ACCOUNTS_PK ON ACCOUNTS (ACCOUNT_ID)	;
   ALTER TABLE ACCOUNTS ADD CONSTRAINT ACCOUNTS_PK PRIMARY KEY (ACCOUNT_ID);
  
  ALTER TABLE ACCOUNTS ADD CONSTRAINT FK_ACNT_ACNTTP FOREIGN KEY (ACCOUNT_TYPE) REFERENCES ACCOUNT_TYPES(CODE);
  ALTER TABLE ACCOUNTS ADD CONSTRAINT FK_ACNT_OPR FOREIGN KEY (OPERATOR_ID) REFERENCES OPERATORS(OPERATOR_ID);
  ALTER TABLE ACCOUNTS ADD CONSTRAINT FK_ACNT_ACNT FOREIGN KEY (PARENT_ID) REFERENCES ACCOUNTS(ACCOUNT_ID);
  ALTER TABLE ACCOUNTS ADD CONSTRAINT FK_ACNT_DBSRC FOREIGN KEY (DB_SOURCE) REFERENCES DB_SOURCES(CODE);
  
--SALUTATIONCODES
CREATE TABLE SALUTATION_CODES(
	CODE	  CHAR(3) NOT NULL,
	TEXT	 NVARCHAR2(256),
	SORTKEY	 NUMBER
  );
  
	 CREATE UNIQUE INDEX SALUTATION_CODES_PK ON SALUTATION_CODES (CODE);
   ALTER TABLE SALUTATION_CODES ADD CONSTRAINT SALUTATION_CODES_PK PRIMARY KEY (CODE);


--GENDERCODES:
 CREATE TABLE GENDER_CODES
   (
   CODE	 CHAR(1) NOT NULL, 
	LABEL XMLTYPE, 
	DESCRIPTION XMLTYPE, 
	SORTKEY NUMBER
   );
   
   CREATE UNIQUE INDEX GENDER_CODES_PK ON GENDER_CODES (CODE);
   ALTER TABLE GENDER_CODES ADD CONSTRAINT GENDER_CODES_PK PRIMARY KEY (CODE);
   
--LANGUAGECODES:
 CREATE TABLE LANGUAGE_CODES
   (
   CODE	 CHAR(2) NOT NULL, 
	LABEL XMLTYPE, 
	DESCRIPTION XMLTYPE, 
  ICON_ID	   RAW(16),
	SORTKEY NUMBER
   );
   
   CREATE UNIQUE INDEX LANGUAGE_CODES_PK ON LANGUAGE_CODES (CODE);
   ALTER TABLE LANGUAGE_CODES ADD CONSTRAINT LANGUAGE_CODES_PK PRIMARY KEY (CODE);
   
  ALTER TABLE LANGUAGE_CODES ADD CONSTRAINT FK_LNGCOD_RSC FOREIGN KEY (ICON_ID) REFERENCES	RESOURCES(RESOURCE_ID);

--ROLES:
 CREATE TABLE ROLES
   (
   ROLE_ID	RAW(16) DEFAULT SYS_GUID() NOT NULL,
   PARENT_ID		RAW(16),	--FK TO ROLES 
	LABEL XMLTYPE, 
	DESCRIPTION XMLTYPE, 
	ICON_ID	 RAW(16)		--FK TO RESOURCES
   );
   
   CREATE UNIQUE INDEX ROLES_PK ON ROLES (ROLE_ID);
   ALTER TABLE ROLES ADD CONSTRAINT ROLES_PK PRIMARY KEY (ROLE_ID);
   
   ALTER TABLE ROLES ADD CONSTRAINT FK_ROL_RSC FOREIGN KEY (ICON_ID) REFERENCES	 RESOURCES(RESOURCE_ID);
	ALTER TABLE ROLES ADD CONSTRAINT FK_ROL_ROL FOREIGN KEY (PARENT_ID) REFERENCES	ROLES(ROLE_ID);
   
--CONTACTS:
  CREATE TABLE CONTACTS
   (	
   CONTACT_ID  RAW(16) DEFAULT SYS_GUID() NOT NULL, 
   CONTACT_NUMBER	   VARCHAR2(64),
   OPERATOR_ID		 RAW(16),	   --FK TO OPERATORS
   FIRST_NAME		   NVARCHAR2(64),
   MIDDLE_NAME			NVARCHAR2(64),
   LAST_NAME		  NVARCHAR2(64),
   SALUTATION		CHAR(3),	  --FK TO SALUTATIONCODES
   TITLE			  NVARCHAR2(128),
   BIRTH_DATE		   DATE,
   GENDER			  CHAR(1),		  --FK TO GENDERCODES
   USER_LANGUAGE	   CHAR(2),		   --FK TO LANGUAGECODES
   CREATED_BY VARCHAR2(64), 
	CREATED_ON TIMESTAMP(7) WITH TIME ZONE, 
	MODIFIED_BY VARCHAR2(64), 
	MODIFIED_ON TIMESTAMP(7) WITH TIME ZONE, 
  DB_SOURCE CHAR(6),		 --FK TO DB_SOURCES
	DB_VERSION VARCHAR2(32), 
	DB_DELETED VARCHAR2(1)  DEFAULT '0'
   )  ;

  CREATE UNIQUE INDEX CONTACTS_PK ON CONTACTS (CONTACT_ID)	;
   ALTER TABLE CONTACTS ADD CONSTRAINT CONTACTS_PK PRIMARY KEY (CONTACT_ID);
   
   
   ALTER TABLE CONTACTS ADD CONSTRAINT FK_CNT_OPR FOREIGN KEY (OPERATOR_ID) REFERENCES OPERATORS(OPERATOR_ID);
   ALTER TABLE CONTACTS ADD CONSTRAINT FK_CNT_SLC  FOREIGN KEY (SALUTATION) REFERENCES SALUTATION_CODES(CODE);
   ALTER TABLE CONTACTS ADD CONSTRAINT FK_CNT_GNDC	FOREIGN KEY (GENDER) REFERENCES GENDER_CODES(CODE);
   ALTER TABLE CONTACTS ADD CONSTRAINT FK_CNT_LNGC	FOREIGN KEY (USER_LANGUAGE) REFERENCES LANGUAGE_CODES(CODE);
   ALTER TABLE CONTACTS ADD CONSTRAINT FK_CNT_DBSRC FOREIGN KEY (DB_SOURCE) REFERENCES DB_SOURCES(CODE);
   
--ACCOUNTCONTACTS:
 CREATE TABLE ACCOUNT_CONTACTS
   (
   ACCOUNT_ID  RAW(16) NOT NULL,	
   CONTACT_ID  RAW(16) NOT NULL,	
	 CONTACT_ROLE RAW(16)	 --FK TO ROLES
   );
   
   CREATE UNIQUE INDEX ACCOUNT_CONTACTS_PK ON ACCOUNT_CONTACTS (ACCOUNT_ID,CONTACT_ID,CONTACT_ROLE);
   CREATE INDEX ACCOUNT_CONTACTS_IX1 ON ACCOUNT_CONTACTS (CONTACT_ID);
   ALTER TABLE ACCOUNT_CONTACTS ADD CONSTRAINT ACCOUNT_CONTACTS_PK PRIMARY KEY (ACCOUNT_ID,CONTACT_ID,CONTACT_ROLE);
   
   ALTER TABLE ACCOUNT_CONTACTS ADD CONSTRAINT FK_ACNT_CNT_ACNT FOREIGN KEY (ACCOUNT_ID) REFERENCES ACCOUNTS(ACCOUNT_ID) ON DELETE CASCADE;
   ALTER TABLE ACCOUNT_CONTACTS ADD CONSTRAINT FK_ACNT_CNT_CNT FOREIGN KEY (CONTACT_ID) REFERENCES CONTACTS(CONTACT_ID) ON DELETE CASCADE;
   ALTER TABLE ACCOUNT_CONTACTS ADD CONSTRAINT FK_ACNT_CNT_ROLES FOREIGN KEY (CONTACT_ROLE) REFERENCES ROLES(ROLE_ID);
   
--CONTACT_RELATIONSHIPS:
 CREATE TABLE CONTACT_RELATIONSHIPS
   (
   CODE	 CHAR(6) NOT NULL, 
	LABEL XMLTYPE, 
	DESCRIPTION XMLTYPE, 
	SORTKEY NUMBER
   );
   
   CREATE UNIQUE INDEX CONTACT_RELATIONSHIPS_PK ON CONTACT_RELATIONSHIPS (CODE);
   ALTER TABLE CONTACT_RELATIONSHIPS ADD CONSTRAINT CONTACT_RELATIONSHIPS_PK PRIMARY KEY (CODE);
   
--RELATED_CONTACTS:
 CREATE TABLE RELATED_CONTACTS
   (
   CONTACT_ID  RAW(16) NOT NULL,	
   RELATED_ID  RAW(16) NOT NULL,	
	 CONTACT_RELATIONSHIP  CHAR(6)	  --FK TO CONTACT_RELATIONSHIPS
   );
   
   CREATE UNIQUE INDEX RELATED_CONTACTS_PK ON RELATED_CONTACTS (CONTACT_ID,RELATED_ID,CONTACT_RELATIONSHIP);
   ALTER TABLE RELATED_CONTACTS ADD CONSTRAINT RELATED_CONTACTS_PK PRIMARY KEY (CONTACT_ID,RELATED_ID,CONTACT_RELATIONSHIP);
   
   ALTER TABLE RELATED_CONTACTS ADD CONSTRAINT FK_REL_CNT_ACNT FOREIGN KEY (CONTACT_ID) REFERENCES CONTACTS(CONTACT_ID) ON DELETE CASCADE;
   ALTER TABLE RELATED_CONTACTS ADD CONSTRAINT FK_REL_CNT_CNT FOREIGN KEY (RELATED_ID) REFERENCES CONTACTS(CONTACT_ID) ON DELETE CASCADE;
   ALTER TABLE RELATED_CONTACTS ADD CONSTRAINT FK_REL_CNT_RELS FOREIGN KEY (CONTACT_RELATIONSHIP) REFERENCES CONTACT_RELATIONSHIPS(CODE);

--DRIVINGLICENSETYPES:
 CREATE TABLE DRIVING_LICENSE_TYPES
   (
   CODE	 CHAR(4) NOT NULL, 
	LABEL XMLTYPE, 
	DESCRIPTION XMLTYPE, 
	SORTKEY NUMBER
   );
   
   CREATE UNIQUE INDEX DRIVING_LICENSE_TYPES_PK ON DRIVING_LICENSE_TYPES (CODE);
   ALTER TABLE DRIVING_LICENSE_TYPES ADD CONSTRAINT DRIVING_LICENSE_TYPES_PK PRIMARY KEY (CODE);
   
--DRIVERS:
  CREATE TABLE DRIVERS
   (	
   DRIVER_ID  RAW(16) DEFAULT SYS_GUID()  NOT NULL,
   LICENSE_NUMBER	   VARCHAR2(32),
   LICENSE_TYPE			 CHAR(4),	--FK TO DRIVINGLICENSETYPES
   LICENSE_DATE			 DATE,
   PICTURE_ID				  RAW(16),		   --FK TO RESOURCES
	DB_DELETED VARCHAR2(1)  DEFAULT '0'
   )  ;

  CREATE UNIQUE INDEX DRIVERS_PK ON DRIVERS (DRIVER_ID)	 ;
   ALTER TABLE DRIVERS ADD CONSTRAINT DRIVERS_PK PRIMARY KEY (DRIVER_ID);
   
   ALTER TABLE DRIVERS ADD CONSTRAINT FK_DRV_CNT FOREIGN KEY (DRIVER_ID) REFERENCES CONTACTS(CONTACT_ID) ON DELETE CASCADE;
  ALTER TABLE DRIVERS ADD CONSTRAINT FK_DRV_DLICTYP FOREIGN KEY (LICENSE_TYPE) REFERENCES DRIVING_LICENSE_TYPES(CODE);
  ALTER TABLE DRIVERS ADD CONSTRAINT FK_DRD_RSC FOREIGN KEY (PICTURE_ID) REFERENCES	 RESOURCES(RESOURCE_ID);
  
  
  
--LINK_TYPES:
 CREATE TABLE LINK_TYPES
   (
   CODE	 CHAR(4) NOT NULL, 
	LABEL XMLTYPE, 
	DESCRIPTION XMLTYPE, 
	SORTKEY NUMBER
   );
   
   CREATE UNIQUE INDEX LINK_TYPES_PK ON LINK_TYPES (CODE);
   ALTER TABLE LINK_TYPES ADD CONSTRAINT LINK_TYPES_PK PRIMARY KEY (CODE);
   
--LINKS:
 CREATE TABLE LINKS
   (
   OWNER_ID	 RAW(16) NOT NULL,	  
	LINK_TYPE CHAR(4),	   --FK TO LINK_TYPES
	URL	   NVARCHAR2(2000), 
	 LABEL XMLTYPE
   );
   
   CREATE UNIQUE INDEX LINKS_PK ON LINKS (OWNER_ID,LINK_TYPE);
   ALTER TABLE LINKS ADD CONSTRAINT LINKS_PK PRIMARY KEY (OWNER_ID,LINK_TYPE);
   
   ALTER TABLE LINKS ADD CONSTRAINT FK_LNK_LNK_TYP FOREIGN KEY (LINK_TYPE) REFERENCES LINK_TYPES(CODE);
   
   
--PHONE_TYPES:
 CREATE TABLE PHONE_TYPES
   (
   CODE	 CHAR(4) NOT NULL, 
	LABEL XMLTYPE, 
	DESCRIPTION XMLTYPE, 
	SORTKEY NUMBER
   );
   
   CREATE UNIQUE INDEX PHONE_TYPES_PK ON PHONE_TYPES (CODE);
   ALTER TABLE PHONE_TYPES ADD CONSTRAINT PHONE_TYPES_PK PRIMARY KEY (CODE);

--PHONES:
 CREATE TABLE PHONES  
   (
   OWNER_ID	 RAW(16) NOT NULL,	
	PHONE_TYPE CHAR(4),		--FK TO PHONE_TYPES
	COUNTRY_CODE	   CHAR(2),			--FK TO COUNTRY_CODES
	AREA_CODE			 CHAR(4),	   
	PHONE_NUMBER	   VARCHAR2(16),
	PHONE_EXTENSION		 CHAR(4),
	DETAILS			VARCHAR2(128)
   );
   
   CREATE UNIQUE INDEX PHONES_PK ON PHONES (OWNER_ID,PHONE_TYPE);
   ALTER TABLE PHONES ADD CONSTRAINT PHONES_PK PRIMARY KEY (OWNER_ID,PHONE_TYPE);
   
   ALTER TABLE PHONES ADD CONSTRAINT FK_PHN_PHN_TYP FOREIGN KEY (PHONE_TYPE) REFERENCES PHONE_TYPES(CODE);
   ALTER TABLE PHONES ADD CONSTRAINT FK_PHN_COUNTR FOREIGN KEY (COUNTRY_CODE) REFERENCES COUNTRY_CODES(ALPHA_CODE_2);
   
--ADDRESS_TYPES:
 CREATE TABLE ADDRESS_TYPES
   (
   CODE	 CHAR(4) NOT NULL, 
	LABEL XMLTYPE, 
	DESCRIPTION XMLTYPE, 
	SORTKEY NUMBER
   );
   
   CREATE UNIQUE INDEX ADDRESS_TYPES_PK ON ADDRESS_TYPES (CODE);
   ALTER TABLE ADDRESS_TYPES ADD CONSTRAINT ADDRESS_TYPES_PK PRIMARY KEY (CODE);
   
--ADDRESSES:
 CREATE TABLE ADDRESSES 
   (
   OWNER_ID	 RAW(16) NOT NULL,
   ADDRESS_TYPE	 CHAR(4),	   --FK TO ADDRESS_TYPES
   COUNTRY_CODE CHAR(2),	 --FK TO COUNTRY_CODES
   STATE_CODE	 CHAR(3),
   STREET	 NVARCHAR2(128),
   HOUSE	  NVARCHAR2(32),
   ZIPCODE		VARCHAR2(16),
   POBOX		  VARCHAR2(16),
   DETAILS	  NVARCHAR2(128),
  --COORDINATE	   SDO_GEOMETRY
	COORDINATE_LAT		FLOAT,
	COORDINATE_LONG		FLOAT,
	COORDINATE_ALT		FLOAT
   );
   
   CREATE UNIQUE INDEX ADDRESSES_PK ON ADDRESSES (OWNER_ID,ADDRESS_TYPE);
   ALTER TABLE ADDRESSES ADD CONSTRAINT ADDRESSES_PK PRIMARY KEY (OWNER_ID,ADDRESS_TYPE);
   
   ALTER TABLE ADDRESSES ADD CONSTRAINT FK_ADRS_ADRS_TYP FOREIGN KEY (ADDRESS_TYPE) REFERENCES ADDRESS_TYPES(CODE);
   ALTER TABLE ADDRESSES ADD CONSTRAINT FK_ADRS_COUNTR FOREIGN KEY (COUNTRY_CODE) REFERENCES COUNTRY_CODES(ALPHA_CODE_2);
   
----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------
--DEVICE ENTITIES-----------------------------------------------------------------------
----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------

--PLATFORMS:
 CREATE TABLE PLATFORMS		 
   (
   PLATFORM_ID	RAW(16) DEFAULT SYS_GUID() NOT NULL, 
   PLATFORM_NAME  NVARCHAR2(256),	   --RENAMED FROM NAME
   PLATFORM_VERSION	   NVARCHAR2(64),	   --RENAMED FROM VERSIONS
   DB_SOURCE CHAR(6),	  --FK TO DB_SOURCES
	DB_VERSION VARCHAR2(32),
  DB_DELETED VARCHAR2(1)  DEFAULT '0'
   );
   
   CREATE UNIQUE INDEX PLATFORMS_PK ON PLATFORMS (PLATFORM_ID);
   ALTER TABLE PLATFORMS ADD CONSTRAINT PLATFORMS_PK PRIMARY KEY (PLATFORM_ID);
   
   ALTER TABLE PLATFORMS ADD CONSTRAINT FK_PLTF_DBSRC FOREIGN KEY (DB_SOURCE) REFERENCES DB_SOURCES(CODE);
   
--PACKAGES:
 CREATE TABLE PACKAGES		
   (
   PACKAGE_ID  RAW(16) DEFAULT SYS_GUID() NOT NULL, 
   PLATFORM_ID	RAW(16)		 --FK TO PLATFORMS
   );
   
   CREATE UNIQUE INDEX PACKAGES_PK ON PACKAGES (PACKAGE_ID);
   ALTER TABLE PACKAGES ADD CONSTRAINT PACKAGES_PK PRIMARY KEY (PACKAGE_ID);
   
   ALTER TABLE PACKAGES ADD CONSTRAINT FK_PKG_PLTF FOREIGN KEY (PLATFORM_ID) REFERENCES PLATFORMS(PLATFORM_ID);
   
--PACKAGEDELTAS:
 CREATE TABLE PACKAGE_DELTAS
   (
   DELTA_ID	 RAW(16) DEFAULT SYS_GUID() NOT NULL, 
   SOURCE_PACKAGE_ID  RAW(16),		--FK TO PACKAGES
   TARGET_PACKAGE_ID  RAW(16),		--FK TO PACKAGES
   DELTA_IMAGE	   BLOB		 --RECOMMENDED FOR USE IN ORACLE INSTEAD OF SQL SERVER IMAGE TYPE
   );
   
   CREATE UNIQUE INDEX PACKAGE_DELTAS_PK ON PACKAGE_DELTAS (DELTA_ID);
   ALTER TABLE PACKAGE_DELTAS ADD CONSTRAINT PACKAGE_DELTAS_PK PRIMARY KEY (DELTA_ID);
   
   ALTER TABLE PACKAGE_DELTAS ADD CONSTRAINT FK_PKGDLT_SRC_PKG FOREIGN KEY (SOURCE_PACKAGE_ID) REFERENCES PACKAGES(PACKAGE_ID);
   ALTER TABLE PACKAGE_DELTAS ADD CONSTRAINT FK_PKGDLT_TRG_PKG FOREIGN KEY (TARGET_PACKAGE_ID) REFERENCES PACKAGES(PACKAGE_ID);
   
--DEVICETYPES:
 CREATE TABLE DEVICE_TYPES		
   (
   DEVICE_TYPE_ID  RAW(16) DEFAULT SYS_GUID() NOT NULL,		  --RENAMED FROM TYPEID
   PARENT_ID	RAW(16),  
  LABEL XMLTYPE, 
	  DESCRIPTION XMLTYPE, 
	THUMBNAIL_ID	   RAW(16)	  
   );
   
   CREATE UNIQUE INDEX DEVICE_TYPES_PK ON DEVICE_TYPES (DEVICE_TYPE_ID);
   ALTER TABLE DEVICE_TYPES ADD CONSTRAINT DEVICE_TYPES_PK PRIMARY KEY (DEVICE_TYPE_ID);
   
   ALTER TABLE DEVICE_TYPES ADD CONSTRAINT FK_DEVTYP_DEVTYP FOREIGN KEY (PARENT_ID) REFERENCES DEVICE_TYPES(DEVICE_TYPE_ID);
   ALTER TABLE DEVICE_TYPES ADD CONSTRAINT FK_DEVTYP_RSC FOREIGN KEY (THUMBNAIL_ID) REFERENCES	RESOURCES(RESOURCE_ID);
   
--CANMATRICES:
 CREATE TABLE CAN_MATRICES
   (
   MATRIX_ID  RAW(16) DEFAULT SYS_GUID() NOT NULL,	 
   PARENT_ID   RAW(16),		 --FK TO SELF
   PLATFORM_ID RAW(16),		 --FK TO PLATFORMS
   DEVICE_TYPE_ID		RAW(16)		--FK TO DEVICETYPES
   );
   
   CREATE UNIQUE INDEX CAN_MATRICES_PK ON CAN_MATRICES (MATRIX_ID);
   ALTER TABLE CAN_MATRICES ADD CONSTRAINT CAN_MATRICES_PK PRIMARY KEY (MATRIX_ID);
   
   ALTER TABLE CAN_MATRICES ADD CONSTRAINT FK_CANMTRX_CANMTRX FOREIGN KEY (PARENT_ID) REFERENCES CAN_MATRICES(MATRIX_ID);
   ALTER TABLE CAN_MATRICES ADD CONSTRAINT FK_CANMTRX_PLTF FOREIGN KEY (PLATFORM_ID) REFERENCES PLATFORMS(PLATFORM_ID);
   ALTER TABLE CAN_MATRICES ADD CONSTRAINT FK_CANMTRX_DEVTYP FOREIGN KEY (DEVICE_TYPE_ID) REFERENCES DEVICE_TYPES(DEVICE_TYPE_ID);
   
--CANMESSAGES:
 CREATE TABLE CAN_MESSAGES		  
   (
   MATRIX_ID  RAW(16) DEFAULT SYS_GUID() NOT NULL, 
   MESSAGE_ID		 NUMBER,					
   CODE				VARCHAR2(256),		  
  MESSAGE_NAME	NVARCHAR2(256)		 --RENAMED FROM "NAME"
   );
   
   CREATE UNIQUE INDEX CAN_MESSAGES_PK ON CAN_MESSAGES (MATRIX_ID,MESSAGE_ID);
   ALTER TABLE CAN_MESSAGES ADD CONSTRAINT CAN_MESSAGES_PK PRIMARY KEY (MATRIX_ID,MESSAGE_ID);
   
   ALTER TABLE CAN_MESSAGES ADD CONSTRAINT FK_CANMSG_CANMTRX FOREIGN KEY (MATRIX_ID) REFERENCES CAN_MATRICES(MATRIX_ID);

--CANPARAMETERS:
 CREATE TABLE CAN_PARAMETERS		 
   (
   MATRIX_ID  RAW(16),		
   MESSAGE_ID		 NUMBER,
   PARAMETER_ID		 NUMBER NOT NULL, 
   CODE				VARCHAR2(256),		 
   PARAMETER_NAME			  VARCHAR2(256),	  
   PARAMETER_TYPE			  VARCHAR2(256)
   );
   
   CREATE UNIQUE INDEX CAN_PARAMETERS_PK ON CAN_PARAMETERS (MATRIX_ID,MESSAGE_ID,PARAMETER_ID);
   ALTER TABLE CAN_PARAMETERS ADD CONSTRAINT CAN_PARAMETERS_PK PRIMARY KEY (MATRIX_ID,MESSAGE_ID,PARAMETER_ID);
   
   ALTER TABLE CAN_PARAMETERS ADD CONSTRAINT FK_CANPRM_CANMSG FOREIGN KEY (MATRIX_ID,MESSAGE_ID) REFERENCES CAN_MESSAGES(MATRIX_ID,MESSAGE_ID);
   
--DEVICES:
 CREATE TABLE DEVICES
   (
   DEVICE_ID	  RAW(16) DEFAULT SYS_GUID() NOT NULL,	  
   PLATFORM_ID	   RAW(16),	   --FK TO PLATFORM
   DEVICE_TYPE_ID	  RAW(16),		--FK TO DEVICETYPES
   DEVICE_SN	 VARCHAR2(256),
   DEVICE_DIN	  VARCHAR2(256),
   DEVICE_RFID	   VARCHAR2(256),
   SIMIMEI	   VARCHAR2(256),
   SIMIMSI	   VARCHAR2(256),
	   DB_SOURCE CHAR(6),	  --FK TO DB_SOURCES
	DB_VERSION VARCHAR2(32),
  DB_DELETED VARCHAR2(1)  DEFAULT '0'
   );
   
   CREATE UNIQUE INDEX DEVICES_PK ON DEVICES (DEVICE_ID);
   ALTER TABLE DEVICES ADD CONSTRAINT DEVICES_PK PRIMARY KEY (DEVICE_ID);
   
   ALTER TABLE DEVICES ADD CONSTRAINT FK_DEV_PLTF FOREIGN KEY (PLATFORM_ID) REFERENCES PLATFORMS(PLATFORM_ID);
   ALTER TABLE DEVICES ADD CONSTRAINT FK_DEV_DEVTYP FOREIGN KEY (DEVICE_TYPE_ID) REFERENCES DEVICE_TYPES(DEVICE_TYPE_ID);
   ALTER TABLE DEVICES ADD CONSTRAINT FK_DEV_DBSRC FOREIGN KEY (DB_SOURCE) REFERENCES DB_SOURCES(CODE);
   
--FEATURETYPES:
 CREATE TABLE FEATURE_TYPES
   (
   FEATURE_TYPE_ID		RAW(16) DEFAULT SYS_GUID() NOT NULL,	
   PARENT_ID   RAW(16),	 
  DATA_TYPE		 VARCHAR2(1024),
	LABEL XMLTYPE, 
	DESCRIPTION XMLTYPE, 
  ICON_ID	   RAW(16),	   
  IS_MANDATORY	 VARCHAR2(1),
  IS_COMMON	  VARCHAR2(1)
   );
   
   CREATE UNIQUE INDEX FEATURE_TYPES_PK ON FEATURE_TYPES (FEATURE_TYPE_ID);
   ALTER TABLE FEATURE_TYPES ADD CONSTRAINT FEATURE_TYPES_PK PRIMARY KEY (FEATURE_TYPE_ID);
   
   ALTER TABLE FEATURE_TYPES ADD CONSTRAINT FK_FETTYP_FETTYP FOREIGN KEY (PARENT_ID) REFERENCES	 FEATURE_TYPES(FEATURE_TYPE_ID);
   ALTER TABLE FEATURE_TYPES ADD CONSTRAINT FK_FETTYP_RSC FOREIGN KEY (ICON_ID) REFERENCES	RESOURCES(RESOURCE_ID);

--DEVICEFEATURES:
 CREATE TABLE DEVICE_FEATURES
   (
   DEVICE_ID  RAW(16) NOT NULL,	   
   FEATURE_TYPE_ID	RAW(16) NOT NULL,	--FK TO FEATURE TYPES 
	 DEVICE_TYPE_ID	  RAW(16),	  --FK TO DEVICETYPES
   DEV_FEATURE_VALUE	 VARCHAR2(256),		--RENAMED FROM VALUE
   INHERIT	  VARCHAR2(1)
   );
   
   CREATE UNIQUE INDEX DEVICE_FEATURES_PK ON DEVICE_FEATURES (DEVICE_ID,FEATURE_TYPE_ID);
   ALTER TABLE DEVICE_FEATURES ADD CONSTRAINT DEVICE_FEATURES_PK PRIMARY KEY (DEVICE_ID,FEATURE_TYPE_ID);
   
   ALTER TABLE DEVICE_FEATURES ADD CONSTRAINT FK_DEVFT_DEV FOREIGN KEY (DEVICE_ID) REFERENCES DEVICES(DEVICE_ID) ON DELETE CASCADE;
   ALTER TABLE DEVICE_FEATURES ADD CONSTRAINT FK_DEVFT_FEATYP FOREIGN KEY (FEATURE_TYPE_ID) REFERENCES FEATURE_TYPES(FEATURE_TYPE_ID);
   ALTER TABLE DEVICE_FEATURES ADD CONSTRAINT FK_DEVFT_DEVTYP FOREIGN KEY (DEVICE_TYPE_ID) REFERENCES DEVICE_TYPES(DEVICE_TYPE_ID);

--UPDATECAMPAIGNS:
 CREATE TABLE UPDATE_CAMPAIGNS
   (
   CAMPAIGN_ID	RAW(16) NOT NULL,	 
   PACKAGE_ID  RAW(16) NOT NULL
   );
   
   CREATE UNIQUE INDEX UPDATE_CAMPAIGNS_PK ON UPDATE_CAMPAIGNS (CAMPAIGN_ID);
   ALTER TABLE UPDATE_CAMPAIGNS ADD CONSTRAINT UPDATE_CAMPAIGNS_PK PRIMARY KEY (CAMPAIGN_ID);
   
   ALTER TABLE UPDATE_CAMPAIGNS ADD CONSTRAINT FK_CMP_PKG FOREIGN KEY (PACKAGE_ID) REFERENCES PACKAGES(PACKAGE_ID);
   
--UPDATETARGETS:
 CREATE TABLE UPDATE_TARGETS
   (
   CAMPAIGN_ID	RAW(16) NOT NULL,	 
   DEVICE_ID  RAW(16) NOT NULL
   );
   
   CREATE UNIQUE INDEX UPDATE_TARGETS_PK ON UPDATE_TARGETS (CAMPAIGN_ID,DEVICE_ID);
   ALTER TABLE UPDATE_TARGETS ADD CONSTRAINT UPDATE_TARGETS_PK PRIMARY KEY (CAMPAIGN_ID,DEVICE_ID);
   
   ALTER TABLE UPDATE_TARGETS ADD CONSTRAINT FK_TRG_CMP FOREIGN KEY (CAMPAIGN_ID) REFERENCES UPDATE_CAMPAIGNS(CAMPAIGN_ID);
   ALTER TABLE UPDATE_TARGETS ADD CONSTRAINT FK_TRG_DEV	 FOREIGN KEY (DEVICE_ID) REFERENCES DEVICES(DEVICE_ID);
   
--INSTALLEDPACKAGES:
 CREATE TABLE INSTALLED_PACKAGES
   (
   DEVICE_ID  RAW(16) NOT NULL,	   
   PACKAGE_ID  RAW(16) NOT NULL
   );
   
   CREATE UNIQUE INDEX INSTALLED_PACKAGES_PK ON INSTALLED_PACKAGES (DEVICE_ID,PACKAGE_ID);
   ALTER TABLE INSTALLED_PACKAGES ADD CONSTRAINT INSTALLED_PACKAGES_PK PRIMARY KEY (DEVICE_ID,PACKAGE_ID);
   
   ALTER TABLE INSTALLED_PACKAGES ADD CONSTRAINT FK_INSTPKG_DEV FOREIGN KEY (DEVICE_ID) REFERENCES DEVICES(DEVICE_ID) ON DELETE CASCADE;
   ALTER TABLE INSTALLED_PACKAGES ADD CONSTRAINT FK_INSTPKG_PKG	 FOREIGN KEY (PACKAGE_ID) REFERENCES PACKAGES(PACKAGE_ID) ON DELETE CASCADE;
 
--DRIVERDEVICES:
 CREATE TABLE DRIVER_DEVICES
   (
   DRIVER_ID  RAW(16) NOT NULL,	   
   DEVICE_ID  RAW(16) NOT NULL,
   ROLE_ID	 RAW(16)
   );
   
   CREATE UNIQUE INDEX DRIVER_DEVICES_PK ON DRIVER_DEVICES (DRIVER_ID,DEVICE_ID);
   ALTER TABLE DRIVER_DEVICES ADD CONSTRAINT DRIVER_DEVICES_PK PRIMARY KEY (DRIVER_ID,DEVICE_ID);
   
   ALTER TABLE DRIVER_DEVICES ADD CONSTRAINT FK_DRDV_DRV FOREIGN KEY (DRIVER_ID) REFERENCES DRIVERS(DRIVER_ID) ON DELETE CASCADE;
   ALTER TABLE DRIVER_DEVICES ADD CONSTRAINT FK_DRDV_DEV  FOREIGN KEY (DEVICE_ID) REFERENCES DEVICES(DEVICE_ID) ON DELETE CASCADE;
   ALTER TABLE DRIVER_DEVICES ADD CONSTRAINT FK_DRDV_ROL  FOREIGN KEY (ROLE_ID) REFERENCES ROLES(ROLE_ID);

----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------
--VEHICLE ENTITIES----------------------------------------------------------------------
----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------

--VEHICLECATEGORIES:
CREATE TABLE VEHICLE_CATEGORIES
(
        VEHICLE_CATEGORY_ID VARCHAR2(64) NOT NULL,
        DESCRIPTION NVARCHAR2(256)
);

   CREATE UNIQUE INDEX VEHICLE_CATEGORIES_PK ON VEHICLE_CATEGORIES (VEHICLE_CATEGORY_ID);
   ALTER TABLE VEHICLE_CATEGORIES ADD CONSTRAINT VEHICLE_CATEGORIES_PK PRIMARY KEY (VEHICLE_CATEGORY_ID);
  
--VEHICLEBRANDS:
CREATE TABLE VEHICLE_BRANDS
(
        VEHICLE_BRAND_ID VARCHAR2(64) NOT NULL,
        BRAND_LOGO    RAW(16)  --FK TO RESOURCES
);

CREATE UNIQUE INDEX VEHICLE_BRANDS_PK ON VEHICLE_BRANDS (VEHICLE_BRAND_ID);
   ALTER TABLE VEHICLE_BRANDS ADD CONSTRAINT VEHICLE_BRANDS_PK PRIMARY KEY (VEHICLE_BRAND_ID);
  
   ALTER TABLE VEHICLE_BRANDS ADD CONSTRAINT FK_VEHBRND_RSC FOREIGN KEY (BRAND_LOGO) REFERENCES	 RESOURCES(RESOURCE_ID);


--VEHICLETYPES:
 CREATE TABLE VEHICLE_TYPES
   (
   VEHICLE_TYPE_ID	RAW(16) DEFAULT SYS_GUID() NOT NULL,
   VEHICLE_CATEGORY		VARCHAR2(64),   --FK TO VEHICLE_CATEGORIES
   VEHICLE_BRAND	  VARCHAR2(64),   --FK TO VEHICLE_BRANDS
   VEHICLE_MODEL	 VARCHAR2(64),
   VEHICLE_TRIM		  VARCHAR2(64),
   MODEL_YEAR	 NUMBER,
   THUMBNAIL_ID RAW(16) 
   );
   
   CREATE UNIQUE INDEX VEHICLE_TYPES_PK ON VEHICLE_TYPES (VEHICLE_TYPE_ID);
   ALTER TABLE VEHICLE_TYPES ADD CONSTRAINT VEHICLE_TYPES_PK PRIMARY KEY (VEHICLE_TYPE_ID);
   
   ALTER TABLE VEHICLE_TYPES ADD CONSTRAINT FK_VEHTYP_VEHBRND  FOREIGN KEY (VEHICLE_BRAND) REFERENCES VEHICLE_BRANDS(VEHICLE_BRAND_ID);
   ALTER TABLE VEHICLE_TYPES ADD CONSTRAINT FK_VEHTYP_VEHBCAT  FOREIGN KEY (VEHICLE_CATEGORY) REFERENCES VEHICLE_CATEGORIES(VEHICLE_CATEGORY_ID);
   ALTER TABLE VEHICLE_TYPES ADD CONSTRAINT FK_VEHTYP_RSC FOREIGN KEY (THUMBNAIL_ID) REFERENCES	 RESOURCES(RESOURCE_ID);

--VEHICLES:
 CREATE TABLE VEHICLES
   (
   VEHICLE_ID  RAW(16) DEFAULT SYS_GUID() NOT NULL,	 
   OPERATOR_ID RAW(16),		   --FK TO OPERATORS
   VEHICLE_TYPE_ID	  RAW(16),	  --FK TO VEHICLE TYPES (RENAMED FROM VEHICLE TYPE)
   VEHICLE_SN	  VARCHAR2(128), 
   VEHICLE_VIN	   VARCHAR2(128),
   VEHICLE_RFID		VARCHAR2(128),
   LICENSE_PLATE	 VARCHAR2(32),
   EXTERNAL_COLOR	   VARCHAR2(32),
   INTERNAL_COLOR	 VARCHAR2(32),
   DB_SOURCE CHAR(6),	  --FK TO DB_SOURCES
	DB_VERSION VARCHAR2(32),
  DB_DELETED VARCHAR2(1)  DEFAULT '0'
   );
   
   CREATE UNIQUE INDEX VEHICLES_PK ON VEHICLES (VEHICLE_ID);
   ALTER TABLE VEHICLES ADD CONSTRAINT VEHICLES_PK PRIMARY KEY (VEHICLE_ID);
   
   ALTER TABLE VEHICLES ADD CONSTRAINT FK_VEH_OPR FOREIGN KEY (OPERATOR_ID) REFERENCES OPERATORS(OPERATOR_ID);
	ALTER TABLE VEHICLES ADD CONSTRAINT FK_VEH_VEHTYP FOREIGN KEY (VEHICLE_TYPE_ID) REFERENCES VEHICLE_TYPES(VEHICLE_TYPE_ID);
	ALTER TABLE VEHICLES ADD CONSTRAINT FK_VEH_DBSRC FOREIGN KEY (DB_SOURCE) REFERENCES DB_SOURCES(CODE);
	
--VEHICLEFEATURES:
 CREATE TABLE VEHICLE_FEATURES
   (
   VEHICLE_ID  RAW(16) NOT NULL,	
   FEATURE_TYPE_ID	RAW(16) NOT NULL,	 
	 VEHICLE_TYPE_ID   RAW(16),	   --FK TOVEHICLETYPES
   VEH_FEATURE_VALUE	 VARCHAR2(256),		--RENAMED FROM VALUE
   INHERIT	  VARCHAR2(1)
   );
   
   CREATE UNIQUE INDEX VEHICLE_FEATURES_PK ON VEHICLE_FEATURES (VEHICLE_ID,FEATURE_TYPE_ID);
   ALTER TABLE VEHICLE_FEATURES ADD CONSTRAINT VEHICLE_FEATURES_PK PRIMARY KEY (VEHICLE_ID,FEATURE_TYPE_ID);
   
   ALTER TABLE VEHICLE_FEATURES ADD CONSTRAINT FK_VEHFT_VEH	 FOREIGN KEY (VEHICLE_ID) REFERENCES VEHICLES(VEHICLE_ID) ON DELETE CASCADE;
   ALTER TABLE VEHICLE_FEATURES ADD CONSTRAINT FK_VEHFT_FEATYP FOREIGN KEY (FEATURE_TYPE_ID) REFERENCES FEATURE_TYPES(FEATURE_TYPE_ID);
   ALTER TABLE VEHICLE_FEATURES ADD CONSTRAINT FK_VEHFT_VEHTYP FOREIGN KEY (VEHICLE_TYPE_ID) REFERENCES VEHICLE_TYPES(VEHICLE_TYPE_ID);
   
--VEHICLEACCOUNTS:
 CREATE TABLE VEHICLE_ACCOUNTS
   (
   VEHICLE_ID  RAW(16) NOT NULL,	
   ACCOUNT_ID  RAW(16) NOT NULL,
   ROLE_ID	 RAW(16)   
   );
   
   CREATE UNIQUE INDEX VEHICLE_ACCOUNTS_PK ON VEHICLE_ACCOUNTS (VEHICLE_ID,ACCOUNT_ID);
   ALTER TABLE VEHICLE_ACCOUNTS ADD CONSTRAINT VEHICLE_ACCOUNTS_PK PRIMARY KEY (VEHICLE_ID,ACCOUNT_ID);
   
   ALTER TABLE VEHICLE_ACCOUNTS ADD CONSTRAINT FK_VEHACC_VEH FOREIGN KEY (VEHICLE_ID) REFERENCES VEHICLES(VEHICLE_ID) ON DELETE CASCADE;
   ALTER TABLE VEHICLE_ACCOUNTS ADD CONSTRAINT FK_VEHACC_ACC  FOREIGN KEY (ACCOUNT_ID) REFERENCES ACCOUNTS(ACCOUNT_ID) ON DELETE CASCADE;
   ALTER TABLE VEHICLE_ACCOUNTS ADD CONSTRAINT FK_VEHACC_ROL  FOREIGN KEY (ROLE_ID) REFERENCES ROLES(ROLE_ID);
   
--VEHICLEDEVICES:
 CREATE TABLE VEHICLE_DEVICES
   (
   VEHICLE_ID  RAW(16) NOT NULL,	
   DEVICE_ID  RAW(16) NOT NULL,
   ROLE_ID	 RAW(16)	 
   );
   
   CREATE UNIQUE INDEX VEHICLE_DEVICES_PK ON VEHICLE_DEVICES (VEHICLE_ID,DEVICE_ID);
   ALTER TABLE VEHICLE_DEVICES ADD CONSTRAINT VEHICLE_DEVICES_PK PRIMARY KEY (VEHICLE_ID,DEVICE_ID);
   
   ALTER TABLE VEHICLE_DEVICES ADD CONSTRAINT FK_VEHDV_VEH FOREIGN KEY (VEHICLE_ID) REFERENCES VEHICLES(VEHICLE_ID) ON DELETE CASCADE;
   ALTER TABLE VEHICLE_DEVICES ADD CONSTRAINT FK_VEHDV_DEV	FOREIGN KEY (DEVICE_ID) REFERENCES DEVICES(DEVICE_ID) ON DELETE CASCADE;
   ALTER TABLE VEHICLE_DEVICES ADD CONSTRAINT FK_VEHDV_ROL	FOREIGN KEY (ROLE_ID) REFERENCES ROLES(ROLE_ID);
   
--VEHICLEDRIVERS:
 CREATE TABLE VEHICLE_DRIVERS
   (
   VEHICLE_ID  RAW(16) NOT NULL,	
   DRIVER_ID  RAW(16) NOT NULL,
   ROLE_ID	 RAW(16)	
   );
   
   CREATE UNIQUE INDEX VEHICLE_DRIVERS_PK ON VEHICLE_DRIVERS (VEHICLE_ID,DRIVER_ID);
   ALTER TABLE VEHICLE_DRIVERS ADD CONSTRAINT VEHICLE_DRIVERS_PK PRIMARY KEY (VEHICLE_ID,DRIVER_ID);
   
   ALTER TABLE VEHICLE_DRIVERS ADD CONSTRAINT FK_VEHDRV_VEH FOREIGN KEY (VEHICLE_ID) REFERENCES VEHICLES(VEHICLE_ID) ON DELETE CASCADE;
   ALTER TABLE VEHICLE_DRIVERS ADD CONSTRAINT FK_VEHDRV_DRV	 FOREIGN KEY (DRIVER_ID) REFERENCES DRIVERS(DRIVER_ID) ON DELETE CASCADE;
   ALTER TABLE VEHICLE_DRIVERS ADD CONSTRAINT FK_VEHDRV_ROL	 FOREIGN KEY (ROLE_ID) REFERENCES ROLES(ROLE_ID);
   
--VEHICLEMETRICS:
 CREATE TABLE VEHICLE_METRICS	
   (
   VEHICLE_ID  RAW(16) NOT NULL,	
   DRIVER_ID  RAW(16) NOT NULL,
   DRIVING_STATE   VARCHAR2(32),
   IGNITION_STATE	VARCHAR2(32),
   GEAR_POSITION   VARCHAR2(32),
   --COORDINATE	   SDO_GEOMETRY
	COORDINATE_LAT		FLOAT,
	COORDINATE_LONG		FLOAT,
	COORDINATE_ALT		FLOAT,
   HEADING	   FLOAT,
   ODOMETER		FLOAT,
   SPEED	 FLOAT,
   FUEL_LEVEL	  FLOAT,
   FUEL_RANGE	  FLOAT,
   BRAKES_LEVEL		FLOAT,
   EMERGENCY_BRAKES	  VARCHAR2(1),
   DAY_NIGHT_MODE	VARCHAR2(1),
   AMBIENT_LIGHT_LEVEL	  FLOAT,
   CLIMATE_CONTROL	  VARCHAR2(32),
	EXTERNAL_TEMPERATURE	FLOAT,
	 INTERNAL_TEMPERATURE	 FLOAT,
	  ENGINE_POWER	  FLOAT,
	   AUXILIARY_POWER	  FLOAT,
		BATTERY_CAPACITY	FLOAT,
		 BATTERY_ENERGY	   FLOAT,
		  BATTERY_SOC	 FLOAT,
		  LAST_UPDATE	TIMESTAMP(7) WITH TIME ZONE,
   DB_SOURCE CHAR(6),	  --FK TO DB_SOURCES
	DB_VERSION VARCHAR2(32),
  DB_DELETED VARCHAR2(1)  DEFAULT '0'
   );
   
   CREATE UNIQUE INDEX VEHICLE_METRICS_PK ON VEHICLE_METRICS (VEHICLE_ID);
   ALTER TABLE VEHICLE_METRICS ADD CONSTRAINT VEHICLE_METRICS_PK PRIMARY KEY (VEHICLE_ID);
   
   ALTER TABLE VEHICLE_METRICS ADD CONSTRAINT FK_VEHMTR_VEH FOREIGN KEY (VEHICLE_ID) REFERENCES VEHICLES(VEHICLE_ID);
   ALTER TABLE VEHICLE_METRICS ADD CONSTRAINT FK_VEHMTR_DRV	 FOREIGN KEY (DRIVER_ID) REFERENCES DRIVERS(DRIVER_ID);
   ALTER TABLE VEHICLE_METRICS ADD CONSTRAINT FK_VEHMTR_DBSRC FOREIGN KEY (DB_SOURCE) REFERENCES DB_SOURCES(CODE);
   
----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------
--DRIVER ENTITIES-----------------------------------------------------------------------
----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------  

--TRAFFICEVENTS:
  CREATE TABLE TRAFFIC_EVENTS
   (	
   TRAFFIC_ID  RAW(16) DEFAULT SYS_GUID() NOT NULL,
   OPERATOR_ID	   RAW(16),	  --FK TO OPERATORS
   REGION_ID	   RAW(16),	  --FK TO REGIONS
   AGE_FROM		 TIMESTAMP(7) WITH TIME ZONE,
   AGE_TO	   TIMESTAMP(7) WITH TIME ZONE,		  
   CODES	NUMBER,
   DIRECTION	NUMBER,
  EVENT_EXTENT	  NUMBER,	
   EVENT_LENGTH FLOAT,	   
   EVENT_DELAY	 INTERVAL DAY TO SECOND,
   SPEED FLOAT,
   LOAD_LEVEL FLOAT,
   IS_TWO_WAY	 VARCHAR2(1),
   EXPIRATION	  TIMESTAMP(7) WITH TIME ZONE,
   LAST_UPDATE	   TIMESTAMP(7) WITH TIME ZONE,
   --ORIGIN_LOCATION	   SDO_GEOMETRY
	ORIGIN_LOCATION_LAT		FLOAT,
	ORIGIN_LOCATION_LONG		FLOAT,
	ORIGIN_LOCATION_ALT		FLOAT,
   ORIGIN_LOCATION_CODE	   NUMBER,
   ORIGIN_LOCATION_TABLE	NUMBER,
   ORIGIN_COUNTRY_CODE	  NUMBER,
   --DESTINATION_LOCATION	  SDO_GEOMETRY,
   DESTINATION_LOCATION_LAT		FLOAT,
	DESTINATION_LOCATION_LONG		FLOAT,
	DESTINATION_LOCATION_ALT		FLOAT,
   DESTINATION_LOCATION_CODE	NUMBER,
   DESTINATION_LOCATION_TABLE	 NUMBER,
   DESTINATION_COUNTRY_CODE	   NUMBER,
  DB_SOURCE CHAR(6),		 --FK TO DB_SOURCES
	DB_VERSION VARCHAR2(32), 
	DB_DELETED VARCHAR2(1)  DEFAULT '0'
   )  ;

  CREATE UNIQUE INDEX TRAFFIC_EVENTS_PK ON TRAFFIC_EVENTS (TRAFFIC_ID)	;
   ALTER TABLE TRAFFIC_EVENTS ADD CONSTRAINT TRAFFIC_EVENTS_PK PRIMARY KEY (TRAFFIC_ID);
   
   
   ALTER TABLE TRAFFIC_EVENTS ADD CONSTRAINT FK_TRFEVN_OPR FOREIGN KEY (OPERATOR_ID) REFERENCES OPERATORS(OPERATOR_ID);
   ALTER TABLE TRAFFIC_EVENTS ADD CONSTRAINT FK_TRFEVN_REG	FOREIGN KEY (REGION_ID) REFERENCES REGIONS(REGION_ID);
   ALTER TABLE TRAFFIC_EVENTS ADD CONSTRAINT FK_TRFEVN_DBSRC FOREIGN KEY (DB_SOURCE) REFERENCES DB_SOURCES(CODE);
   
--SPEEDCAMERAS:
  CREATE TABLE SPEED_CAMERAS
   (	
   CAMERA_ID  RAW(16) DEFAULT SYS_GUID() NOT NULL,
   OPERATOR_ID	   RAW(16),	  --FK TO OPERATORS
   REGION_ID	   RAW(16),	  --FK TO REGIONS
   CAMERA_TYPE	 VARCHAR2(32),
   DIRECTION	FLOAT,
   ORIENTATION	 VARCHAR2(32),
   --COORDINATE	SDO_GEOMETRY,
   COORDINATE_LAT		FLOAT,
	COORDINATE_LONG		FLOAT,
	COORDINATE_ALT		FLOAT,
   DISTANCE	  FLOAT,
  DB_SOURCE CHAR(6),		 --FK TO DB_SOURCES
	DB_VERSION VARCHAR2(32), 
	DB_DELETED VARCHAR2(1)  DEFAULT '0'
   )  ;

  CREATE UNIQUE INDEX SPEED_CAMERAS_PK ON SPEED_CAMERAS (CAMERA_ID)	 ;
   ALTER TABLE SPEED_CAMERAS ADD CONSTRAINT SPEED_CAMERAS_PK PRIMARY KEY (CAMERA_ID);
   
   ALTER TABLE SPEED_CAMERAS ADD CONSTRAINT FK_SPDCAM_OPR FOREIGN KEY (OPERATOR_ID) REFERENCES OPERATORS(OPERATOR_ID);
   ALTER TABLE SPEED_CAMERAS ADD CONSTRAINT FK_SPDCAM_REG  FOREIGN KEY (REGION_ID) REFERENCES REGIONS(REGION_ID);
   ALTER TABLE SPEED_CAMERAS ADD CONSTRAINT FK_SPDCAM_DBSRC FOREIGN KEY (DB_SOURCE) REFERENCES DB_SOURCES(CODE);
   
--DRIVINGPROFILES:
 CREATE TABLE DRIVING_PROFILES
   (
   DRIVER_ID  RAW(16) NOT NULL,	   
   VEHICLE_ID  RAW(16) NOT NULL
   );
   
   CREATE UNIQUE INDEX DRIVING_PROFILES_PK ON DRIVING_PROFILES (DRIVER_ID,VEHICLE_ID);
   ALTER TABLE DRIVING_PROFILES ADD CONSTRAINT DRIVING_PROFILES_PK PRIMARY KEY (DRIVER_ID,VEHICLE_ID);
   
   ALTER TABLE DRIVING_PROFILES ADD CONSTRAINT FK_DRVPRF_ACC  FOREIGN KEY (DRIVER_ID) REFERENCES DRIVERS(DRIVER_ID) ON DELETE CASCADE;
   ALTER TABLE DRIVING_PROFILES ADD CONSTRAINT FK_DRVPRF_VEH FOREIGN KEY (VEHICLE_ID) REFERENCES VEHICLES(VEHICLE_ID) ON DELETE CASCADE;
   

----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------
--APPLICATION ENTITIES------------------------------------------------------------------
----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------
--APPLICATIONTYPES:
 CREATE TABLE APPLICATION_TYPES
   (
   APPLICATION_TYPE_ID	RAW(16) DEFAULT SYS_GUID() NOT NULL, 
   PARENT_ID   RAW(16),	 
	LABEL XMLTYPE, 
	DESCRIPTION XMLTYPE, 
	ICON_ID		  RAW(16)	  --FK TO RESOURCES 
   );
   
   CREATE UNIQUE INDEX APPLICATION_TYPES_PK ON APPLICATION_TYPES (APPLICATION_TYPE_ID);
   ALTER TABLE APPLICATION_TYPES ADD CONSTRAINT APPLICATION_TYPES_PK PRIMARY KEY (APPLICATION_TYPE_ID);
   
   ALTER TABLE APPLICATION_TYPES ADD CONSTRAINT FK_APPTYP_APPTYP FOREIGN KEY (PARENT_ID) REFERENCES	 APPLICATION_TYPES(APPLICATION_TYPE_ID);
   ALTER TABLE APPLICATION_TYPES ADD CONSTRAINT FK_APPTYP_RSC FOREIGN KEY (ICON_ID) REFERENCES	RESOURCES(RESOURCE_ID);

--APPLICATIONS:
 CREATE TABLE APPLICATIONS
   (
   APPLICATION_ID  RAW(16) DEFAULT SYS_GUID() NOT NULL,	 
   APPLICATION_TYPE_ID	  RAW(16),
   OPERATOR_ID	 RAW(16),	--FK TO OPERATORS
   LABEL XMLTYPE, 
	DESCRIPTION XMLTYPE, 
  COPYRIGHTS   NVARCHAR2(1024),
  DOMAIN	VARCHAR2(256),
  ICON_ID	RAW(16),	 --FK TO RESOURCES
  THUMBNAIL_ID	 RAW(16), --FK TO RESOURCES
  HOME_PAGE	  VARCHAR2(1024),
  CONTENT_FILTERS	VARCHAR2(256),
  PERMISSION_SET   VARCHAR2(256),
  PUBLISHER	  NVARCHAR2(256),
  PUBLISH_DATE	 TIMESTAMP(7) WITH TIME ZONE,
  PUBLISH_VERSION	VARCHAR2(64),
  PLATFORM_VERSION	 VARCHAR2(64),
  APPLICATION_QUOTA FLOAT,	   --RENAMED FROM QUOTA
  RATING_COUNT	 NUMBER,
  RATING_SCORE	 FLOAT,
   DB_SOURCE CHAR(6),	  --FK TO DB_SOURCES
	DB_VERSION VARCHAR2(32),
  DB_DELETED VARCHAR2(1)  DEFAULT '0'
   );
   
   CREATE UNIQUE INDEX APPLICATIONS_PK ON APPLICATIONS (APPLICATION_ID);
   ALTER TABLE APPLICATIONS ADD CONSTRAINT APPLICATIONS_PK PRIMARY KEY (APPLICATION_ID);
   
   ALTER TABLE APPLICATIONS ADD CONSTRAINT FK_APP_OPR FOREIGN KEY (OPERATOR_ID) REFERENCES OPERATORS(OPERATOR_ID);
	ALTER TABLE APPLICATIONS ADD CONSTRAINT FK_APP_VEHTYP FOREIGN KEY (APPLICATION_TYPE_ID) REFERENCES APPLICATION_TYPES(APPLICATION_TYPE_ID);
	ALTER TABLE APPLICATIONS ADD CONSTRAINT FK_APP_ICON_RES FOREIGN KEY (ICON_ID) REFERENCES RESOURCES(RESOURCE_ID);
	ALTER TABLE APPLICATIONS ADD CONSTRAINT FK_APP_THMB_RES FOREIGN KEY (THUMBNAIL_ID) REFERENCES RESOURCES(RESOURCE_ID);	
	ALTER TABLE APPLICATIONS ADD CONSTRAINT FK_APP_DBSRC FOREIGN KEY (DB_SOURCE) REFERENCES DB_SOURCES(CODE);
	
--DRIVERRESOURCES:
 CREATE TABLE DRIVER_RESOURCES
   (
   DRIVER_ID   RAW(16),	  --FK TO DRIVERS
	APPLICATION_ID	RAW(16),	--FK TO APPLICATIONS
	RESOURCE_ID	  RAW(16)	   --FK TO RESOURCES
   );
   
   CREATE UNIQUE INDEX DRIVER_RESOURCES_PK ON DRIVER_RESOURCES (DRIVER_ID,APPLICATION_ID,RESOURCE_ID);
   ALTER TABLE DRIVER_RESOURCES ADD CONSTRAINT DRIVER_RESOURCES_PK PRIMARY KEY (DRIVER_ID,APPLICATION_ID,RESOURCE_ID);
   
   ALTER TABLE DRIVER_RESOURCES ADD CONSTRAINT FK_DRVRES_DRV FOREIGN KEY (DRIVER_ID) REFERENCES DRIVERS(DRIVER_ID) ON DELETE CASCADE;
	ALTER TABLE DRIVER_RESOURCES ADD CONSTRAINT FK_DRVRES_APP FOREIGN KEY (APPLICATION_ID) REFERENCES APPLICATIONS(APPLICATION_ID) ON DELETE CASCADE;
	ALTER TABLE DRIVER_RESOURCES ADD CONSTRAINT FK_DRVRES_RES FOREIGN KEY (RESOURCE_ID) REFERENCES RESOURCES(RESOURCE_ID) ON DELETE CASCADE;
	
--APPLICATIONTASKS:
 CREATE TABLE APPLICATION_TASKS
   (
   DEVICE_ID   RAW(16),	  --FK TO DEVICES
	APPLICATION_ID	RAW(16)	   --FK TO APPLICATIONS
   );
   
   CREATE UNIQUE INDEX APPLICATION_TASKS_PK ON APPLICATION_TASKS (DEVICE_ID,APPLICATION_ID);   
   ALTER TABLE APPLICATION_TASKS ADD CONSTRAINT APPLICATION_TASKS_PK PRIMARY KEY (DEVICE_ID,APPLICATION_ID);
   
   ALTER TABLE APPLICATION_TASKS ADD CONSTRAINT FK_APPTSK_DEV FOREIGN KEY (DEVICE_ID) REFERENCES DEVICES(DEVICE_ID) ON DELETE CASCADE;
	ALTER TABLE APPLICATION_TASKS ADD CONSTRAINT FK_APPTSK_APP FOREIGN KEY (APPLICATION_ID) REFERENCES APPLICATIONS(APPLICATION_ID) ON DELETE CASCADE;

--APPLICATIONSETTINGS:
 CREATE TABLE APPLICATION_SETTINGS
   (
   DRIVER_ID   RAW(16),	  --FK TO DRIVERS
   DEVICE_ID   RAW(16),	  --FK TO DEVICES
	APPLICATION_ID	RAW(16),	--FK TO APPLICATIONS
	APP_SETTINGS  XMLTYPE	   --RENAMED FROM SETTINGS
   );
   
   CREATE UNIQUE INDEX APPLICATION_SETTINGS_PK ON APPLICATION_SETTINGS (DRIVER_ID,DEVICE_ID,APPLICATION_ID); 
   ALTER TABLE APPLICATION_SETTINGS ADD CONSTRAINT APPLICATION_SETTINGS_PK PRIMARY KEY (DRIVER_ID,DEVICE_ID,APPLICATION_ID);
   
   ALTER TABLE APPLICATION_SETTINGS ADD CONSTRAINT FK_APPSET_DRV FOREIGN KEY (DRIVER_ID) REFERENCES DRIVERS(DRIVER_ID) ON DELETE CASCADE;
   ALTER TABLE APPLICATION_SETTINGS ADD CONSTRAINT FK_APPSET_DEV FOREIGN KEY (DEVICE_ID) REFERENCES DEVICES(DEVICE_ID) ON DELETE CASCADE;
	ALTER TABLE APPLICATION_SETTINGS ADD CONSTRAINT FK_APPSET_APP FOREIGN KEY (APPLICATION_ID) REFERENCES APPLICATIONS(APPLICATION_ID) ON DELETE CASCADE;
	
--APPLICATIONFEATURES:
 CREATE TABLE APPLICATION_FEATURES
   (
   APPLICATION_ID  RAW(16) NOT NULL,	
   FEATURE_TYPE_ID	RAW(16) NOT NULL,	 --FK TO FEATURE TYPES
	 APPLICATION_TYPE_ID   RAW(16),	   --FK TO APPLICATIONTYPES
   APPFEATUREVALUE	   VARCHAR2(256),	  --RENAMED FROM VALUE
   INHERIT	  VARCHAR2(1)
   );
   
   CREATE UNIQUE INDEX APPLICATION_FEATURES_PK ON APPLICATION_FEATURES (APPLICATION_ID,FEATURE_TYPE_ID);
   ALTER TABLE APPLICATION_FEATURES ADD CONSTRAINT APPLICATION_FEATURES_PK PRIMARY KEY (APPLICATION_ID,FEATURE_TYPE_ID);
   
   ALTER TABLE APPLICATION_FEATURES ADD CONSTRAINT FK_APPFT_APP FOREIGN KEY (APPLICATION_ID) REFERENCES APPLICATIONS(APPLICATION_ID) ON DELETE CASCADE;
   ALTER TABLE APPLICATION_FEATURES ADD CONSTRAINT FK_APPFT_FEATYP FOREIGN KEY (FEATURE_TYPE_ID) REFERENCES FEATURE_TYPES(FEATURE_TYPE_ID);
   ALTER TABLE APPLICATION_FEATURES ADD CONSTRAINT FK_APPFT_APPTYP FOREIGN KEY (APPLICATION_TYPE_ID) REFERENCES APPLICATION_TYPES(APPLICATION_TYPE_ID);

----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------
--DRIVER ENTITIES CONT.-----------------------------------------------------------------
----------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------- 

--DESTINATION_TYPES:
 CREATE TABLE DESTINATION_TYPES
   (
   CODE	 CHAR(4) NOT NULL, 
	LABEL XMLTYPE, 
	DESCRIPTION XMLTYPE, 
	SORTKEY NUMBER
   );
   
   CREATE UNIQUE INDEX DESTINATION_TYPES_PK ON DESTINATION_TYPES (CODE);
   ALTER TABLE DESTINATION_TYPES ADD CONSTRAINT DESTINATION_TYPES_PK PRIMARY KEY (CODE);
   
--PLACETYPES:
 CREATE TABLE PLACE_TYPES
   (
   PLACE_TYPE_ID  RAW(16) DEFAULT SYS_GUID() NOT NULL,
   PARENT_ID   RAW(16), 
	LABEL XMLTYPE, 
	DESCRIPTION XMLTYPE, 
	ICON_ID	 RAW(16)		--FK TO RESOURCES
   );
   
   CREATE UNIQUE INDEX PLACE_TYPES_PK ON PLACE_TYPES (PLACE_TYPE_ID);
   ALTER TABLE PLACE_TYPES ADD CONSTRAINT PLACE_TYPES_PK PRIMARY KEY (PLACE_TYPE_ID);
   
   ALTER TABLE PLACE_TYPES ADD CONSTRAINT FK_PLCTYP_PLCTYP FOREIGN KEY (PARENT_ID) REFERENCES  PLACE_TYPES(PLACE_TYPE_ID);
	ALTER TABLE PLACE_TYPES ADD CONSTRAINT FK_PLCTYP_RSC FOREIGN KEY (ICON_ID) REFERENCES  RESOURCES(RESOURCE_ID);
	
--PLACES:
 CREATE TABLE PLACES
   (
   PLACE_ID	 RAW(16) DEFAULT SYS_GUID() NOT NULL,	
   OPERATOR_ID	 RAW(16),	--FK TO OPERATORS
   REGION_ID   RAW(16),	  --FK TO REGIONS
   PLACE_TYPE_ID RAW(16),	--FK TO PLACETYPES
   --COORDINATE	SDO_GEOMETRY,
   COORDINATE_LAT		FLOAT,
	COORDINATE_LONG		FLOAT,
	COORDINATE_ALT		FLOAT,
	LABEL XMLTYPE, 
	DESCRIPTION XMLTYPE, 
  RATING_COUNT	 NUMBER,
  RATING_SCORE	 FLOAT,
DB_SOURCE CHAR(6),	   --FK TO DB_SOURCES
	DB_VERSION VARCHAR2(32), 
	DB_DELETED VARCHAR2(1)  DEFAULT '0'
   );
   
   CREATE UNIQUE INDEX PLACESTYPES_PK ON PLACES (PLACE_ID);
   ALTER TABLE PLACES ADD CONSTRAINT PLACES_PK PRIMARY KEY (PLACE_ID);
   
	ALTER TABLE PLACES ADD CONSTRAINT FK_PLC_OPR FOREIGN KEY (OPERATOR_ID) REFERENCES  OPERATORS(OPERATOR_ID);
	ALTER TABLE PLACES ADD CONSTRAINT FK_PLC_REG FOREIGN KEY (REGION_ID) REFERENCES	 REGIONS(REGION_ID);
	ALTER TABLE PLACES ADD CONSTRAINT FK_PLC_PLCTYP FOREIGN KEY (PLACE_TYPE_ID) REFERENCES	PLACE_TYPES(PLACE_TYPE_ID);
	ALTER TABLE PLACES ADD CONSTRAINT FK_PLC_DBSRC FOREIGN KEY (DB_SOURCE) REFERENCES DB_SOURCES(CODE);
	
--PLACEFEATURES:
 CREATE TABLE PLACE_FEATURES
   (
   PLACE_ID	 RAW(16) NOT NULL,	  
   FEATURE_TYPE_ID	RAW(16) NOT NULL,	--FK TO FEATURE TYPES 
	 PLACE_TYPE_ID	 RAW(16),	 --FK TO DEVICETYPES
   PLACE_FEATURE_VALUE	   VARCHAR2(256),	  --RENAMED FROM VALUE
   INHERIT	  VARCHAR2(1)
   );
   
   CREATE UNIQUE INDEX PLACE_FEATURES_PK ON PLACE_FEATURES (PLACE_ID,FEATURE_TYPE_ID); 
   ALTER TABLE PLACE_FEATURES ADD CONSTRAINT PLACE_FEATURES_PK PRIMARY KEY (PLACE_ID,FEATURE_TYPE_ID);
   
   ALTER TABLE PLACE_FEATURES ADD CONSTRAINT FK_PLCFT_PLC FOREIGN KEY (PLACE_ID) REFERENCES PLACES(PLACE_ID) ON DELETE CASCADE;
   ALTER TABLE PLACE_FEATURES ADD CONSTRAINT FK_PLCFT_FEATYP FOREIGN KEY (FEATURE_TYPE_ID) REFERENCES FEATURE_TYPES(FEATURE_TYPE_ID);
   ALTER TABLE PLACE_FEATURES ADD CONSTRAINT FK_PLCFT_PLCTYP FOREIGN KEY (PLACE_TYPE_ID) REFERENCES PLACE_TYPES(PLACE_TYPE_ID);
   
--DESTINATIONS:
 CREATE TABLE DESTINATIONS
   (
   DESTINATION_ID RAW(16) DEFAULT SYS_GUID() NOT NULL,	 
   DESTINATION_TYPE	   CHAR(4),	  --FK TO DESTINATION_TYPES
   DRIVER_ID   RAW(16),	  --FK TO DRIVERS
   PLACE_ID	  RAW(16),	 --FK TO PLACES
   PARENT_ID   RAW(16),	  --FK TO DESTINATIONS
   PROXIMITY_ALARM	 FLOAT,
   DB_SOURCE CHAR(6),	  --FK TO DB_SOURCES
	DB_VERSION VARCHAR2(32), 
	DB_DELETED VARCHAR2(1)  DEFAULT '0'
   );
   
   CREATE UNIQUE INDEX DESTINATIONS_PK ON DESTINATIONS (DESTINATION_ID); 
   ALTER TABLE DESTINATIONS ADD CONSTRAINT DESTINATIONS_PK PRIMARY KEY (DESTINATION_ID);
   
   ALTER TABLE DESTINATIONS ADD CONSTRAINT FK_DST_DSTTYP FOREIGN KEY (DESTINATION_TYPE) REFERENCES DESTINATION_TYPES(CODE);
   ALTER TABLE DESTINATIONS ADD CONSTRAINT FK_DST_DRV FOREIGN KEY (DRIVER_ID) REFERENCES DRIVERS(DRIVER_ID) ON DELETE CASCADE;
   ALTER TABLE DESTINATIONS ADD CONSTRAINT FK_DST_PLC FOREIGN KEY (PLACE_ID) REFERENCES PLACES(PLACE_ID) ON DELETE CASCADE;
   ALTER TABLE DESTINATIONS ADD CONSTRAINT FK_DST_DST FOREIGN KEY (PARENT_ID) REFERENCES DESTINATIONS(DESTINATION_ID);
   ALTER TABLE DESTINATIONS ADD CONSTRAINT FK_DST_DBSRC FOREIGN KEY (DB_SOURCE) REFERENCES DB_SOURCES(CODE);

--ROUTES:
 CREATE TABLE ROUTES
   (
   ROUTE_ID RAW(16) DEFAULT SYS_GUID() NOT NULL,   
   DESTINATION_ID	   RAW(16),	  --FK TO DESTINATIONS
   DRIVER_ID   RAW(16),	  --FK TO DRIVERS
   VEHICLE_ID	RAW(16),   --FK TO VEHICLES
   IS_ACTIVE   VARCHAR2(1),
   IS_PLANNED	VARCHAR2(1),
   IS_HISTORIC	 VARCHAR2(1),
   ORIGINAL_DISTANCE   FLOAT,
   ORIGINAL_TIME   NUMBER,	 --CHANGED FROM TIME(7)
   ORIGINAL_SEGMENTS   FLOAT,
   REMAINING_DISTANCE	FLOAT,
   REMAINING_TIME	NUMBER,	  --CHANGED FROM TIME(7)
   REMAINING_SEGMENTS	FLOAT,
   REMAINING_SEGMENTINDEX	NUMBER,
   TRAVELED_DISTANCE   FLOAT,
   TRAVELED_TIME   NUMBER,	 --CHANGED FROM TIME(7)
   TRAVELED_SEGMENTS   FLOAT,
   TRAVELED_SEGMENT_INDEX	NUMBER,
   DB_SOURCE CHAR(6),	  --FK TO DB_SOURCES
	DB_VERSION VARCHAR2(32), 
	DB_DELETED VARCHAR2(1)  DEFAULT '0'
   );
   
   CREATE UNIQUE INDEX ROUTES_PK ON ROUTES (ROUTE_ID); 
   ALTER TABLE ROUTES ADD CONSTRAINT ROUTES_PK PRIMARY KEY (ROUTE_ID);
   
   ALTER TABLE ROUTES ADD CONSTRAINT FK_ROUT_DST FOREIGN KEY (DESTINATION_ID) REFERENCES DESTINATIONS(DESTINATION_ID);
   ALTER TABLE ROUTES ADD CONSTRAINT FK_ROUT_DRV FOREIGN KEY (DRIVER_ID) REFERENCES DRIVERS(DRIVER_ID);
   ALTER TABLE ROUTES ADD CONSTRAINT FK_ROUT_VEH FOREIGN KEY (VEHICLE_ID) REFERENCES VEHICLES(VEHICLE_ID);
   ALTER TABLE ROUTES ADD CONSTRAINT FK_ROUT_DBSRC FOREIGN KEY (DB_SOURCE) REFERENCES DB_SOURCES(CODE);


----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------
--SUPPORT ENTITIES----------------------------------------------------------------------
----------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------- 

--CASESOLUTIONS:
CREATE TABLE CASE_SOLUTIONS
   (
   SOLUTION_ID	 RAW(16) DEFAULT SYS_GUID() NOT NULL
   );
   
   CREATE UNIQUE INDEX CASE_SOLUTIONS_PK ON CASE_SOLUTIONS (SOLUTION_ID);
   ALTER TABLE CASE_SOLUTIONS ADD CONSTRAINT CASE_SOLUTIONS_PK PRIMARY KEY (SOLUTION_ID);

--CASES:
CREATE TABLE CASES
   (
   CASE_ID	 RAW(16) DEFAULT SYS_GUID() NOT NULL,
   ACCOUNT_ID RAW(16),    --FK TO ACCOUNTS
   CONTACT_ID RAW(16),    --FK TO CONTACTS
   VEHICLE_ID RAW(16),    --FK TO VEHICLES
   SOLUTION_ID RAW(16)   --FK TO CASE SOLUTIONS
   );
   
   CREATE UNIQUE INDEX CASES_PK ON CASES (CASE_ID);
   ALTER TABLE CASES ADD CONSTRAINT CASES_PK PRIMARY KEY (CASE_ID);
   
   ALTER TABLE CASES ADD CONSTRAINT FK_CASE_ACC FOREIGN KEY (ACCOUNT_ID) REFERENCES ACCOUNTS(ACCOUNT_ID);
   ALTER TABLE CASES ADD CONSTRAINT FK_CASE_CON FOREIGN KEY (CONTACT_ID) REFERENCES CONTACTS(CONTACT_ID);
   ALTER TABLE CASES ADD CONSTRAINT FK_CASE_VEH FOREIGN KEY (VEHICLE_ID) REFERENCES VEHICLES(VEHICLE_ID);
   ALTER TABLE CASES ADD CONSTRAINT FK_CASE_CSOL FOREIGN KEY (SOLUTION_ID) REFERENCES CASE_SOLUTIONS(SOLUTION_ID);

--CASEHISTORY:
CREATE TABLE CASE_HISTORY
   (
   CASE_ID	 RAW(16) DEFAULT SYS_GUID() NOT NULL,
   ROW_NUMBER     NUMBER,
   CASE_STATUS    VARCHAR2(32)
   );
   
   CREATE UNIQUE INDEX CASE_HISTORY_PK ON CASE_HISTORY (CASE_ID,ROW_NUMBER);
   ALTER TABLE CASE_HISTORY ADD CONSTRAINT CASE_HISTORY_PK PRIMARY KEY (CASE_ID,ROW_NUMBER);
   
   ALTER TABLE CASE_HISTORY ADD CONSTRAINT FK_CHIS_CASE FOREIGN KEY (CASE_ID) REFERENCES CASES(CASE_ID);

--CASEMILESTONES:
CREATE TABLE CASE_MILESTONES
   (
   CASE_ID	 RAW(16) DEFAULT SYS_GUID() NOT NULL,
   MILESTONE_NUMBER     NUMBER
   );
   
   CREATE UNIQUE INDEX CASE_MILESTONES_PK ON CASE_MILESTONES (CASE_ID,MILESTONE_NUMBER);
   ALTER TABLE CASE_MILESTONES ADD CONSTRAINT CASE_MILESTONES_PK PRIMARY KEY (CASE_ID,MILESTONE_NUMBER);
   
   ALTER TABLE CASE_MILESTONES ADD CONSTRAINT FK_CMIL_CASE FOREIGN KEY (CASE_ID) REFERENCES CASES(CASE_ID);
   
--CONTRACTS:
  CREATE TABLE CONTRACTS
   (	
  CONTRACT_ID  RAW(16) DEFAULT SYS_GUID()  NOT NULL,
   CONTRACT_NUMBER	   VARCHAR2(64),
   ACCOUNT_ID   RAW(16)   --FK TO ACCOUNTS
   )  ;

  CREATE UNIQUE INDEX CONTRACTS_PK ON CONTRACTS (CONTRACT_ID)	 ;
   ALTER TABLE CONTRACTS ADD CONSTRAINT CONTRACTS_PK PRIMARY KEY (CONTRACT_ID);
   
   ALTER TABLE CONTRACTS ADD CONSTRAINT FK_DCNTR_ACC FOREIGN KEY (ACCOUNT_ID) REFERENCES ACCOUNTS(ACCOUNT_ID);

--CONTRACTCONTACTS:
  CREATE TABLE CONTRACT_CONTACTS
   (	
  CONTRACT_ID  RAW(16)  NOT NULL,
  CONTACT_ID  RAW(16)  NOT NULL,
   CONTACT_ROLE RAW(16)	 --FK TO ROLES
   )  ;

  CREATE UNIQUE INDEX CONTRACT_CONTACTS_PK ON CONTRACT_CONTACTS (CONTRACT_ID,CONTACT_ID,CONTACT_ROLE);
   CREATE INDEX CONTRACT_CONTACTS_IX1 ON CONTRACT_CONTACTS (CONTACT_ID);
   ALTER TABLE CONTRACT_CONTACTS ADD CONSTRAINT CONTRACT_CONTACTS_PK PRIMARY KEY (CONTRACT_ID,CONTACT_ID,CONTACT_ROLE);
   
   ALTER TABLE CONTRACT_CONTACTS ADD CONSTRAINT FK_CNTR_CNT_CNTR FOREIGN KEY (CONTRACT_ID) REFERENCES CONTRACTS(CONTRACT_ID) ON DELETE CASCADE;
   ALTER TABLE CONTRACT_CONTACTS ADD CONSTRAINT FK_CNTR_CNT_CNT FOREIGN KEY (CONTACT_ID) REFERENCES CONTACTS(CONTACT_ID) ON DELETE CASCADE;
   ALTER TABLE CONTRACT_CONTACTS ADD CONSTRAINT FK_CNTR_CNT_ROLES FOREIGN KEY (CONTACT_ROLE) REFERENCES ROLES(ROLE_ID);

--CASEENTITLEMENTS:
CREATE TABLE CASE_ENTITLEMENTS
   (
   CASE_ID	 RAW(16) NOT NULL,
   ACCOUNT_ID RAW(16),    --FK TO ACCOUNTS
   CONTRACT_ID RAW(16)    --FK TO CONTRACTS
   );
   
   CREATE UNIQUE INDEX CASE_ENTITLEMENTS_PK ON CASE_ENTITLEMENTS (CASE_ID);
   ALTER TABLE CASE_ENTITLEMENTS ADD CONSTRAINT CASE_ENTITLEMENTS_PK PRIMARY KEY (CASE_ID);
   
   ALTER TABLE CASE_ENTITLEMENTS ADD CONSTRAINT FK_CENT_ACC FOREIGN KEY (ACCOUNT_ID) REFERENCES ACCOUNTS(ACCOUNT_ID);
   ALTER TABLE CASE_ENTITLEMENTS ADD CONSTRAINT FK_CENT_CNTR FOREIGN KEY (CONTRACT_ID) REFERENCES CONTRACTS(CONTRACT_ID);

----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------
--S&M ENTITIES--------------------------------------------------------------------------
----------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------- 
   
--MARKETINGRULES:
CREATE TABLE MARKETING_RULES
   (
   RULE_ID	 RAW(16) DEFAULT SYS_GUID() NOT NULL,
   RULE_DEFINITION      VARCHAR2(1024)
   );
   
   CREATE UNIQUE INDEX MARKETING_RULES_PK ON MARKETING_RULES (RULE_ID);
   ALTER TABLE MARKETING_RULES ADD CONSTRAINT MARKETING_RULES_PK PRIMARY KEY (RULE_ID);

--MARKETINGCAMPAIGNS:
CREATE TABLE MARKETING_CAMPAIGNS
   (
   CAMPAIGN_ID	 RAW(16) DEFAULT SYS_GUID() NOT NULL,
   REGION_ID   RAW(16)  --FK TO REGIONS
   );
   
   CREATE UNIQUE INDEX MARKETING_CAMPAIGNS_PK ON MARKETING_CAMPAIGNS (CAMPAIGN_ID);
   ALTER TABLE MARKETING_CAMPAIGNS ADD CONSTRAINT MARKETING_CAMPAIGNS_PK PRIMARY KEY (CAMPAIGN_ID);
   
   ALTER TABLE MARKETING_CAMPAIGNS ADD CONSTRAINT FK_MRKCMP_REG FOREIGN KEY (REGION_ID) REFERENCES REGIONS(REGION_ID);
   
--MARKETINGCAMPAIGNRULES:
CREATE TABLE MARKETING_CAMPAIGN_RULES
   (
   RULE_ID RAW(16) NOT NULL,
   CAMPAIGN_ID	 RAW(16)  NOT NULL
   );
   
   CREATE UNIQUE INDEX MRK_CAMPAIGN_RULES_PK ON MARKETING_CAMPAIGN_RULES (RULE_ID,CAMPAIGN_ID);
   ALTER TABLE MARKETING_CAMPAIGN_RULES ADD CONSTRAINT MRK_CAMPAIGN_RULES_PK PRIMARY KEY (RULE_ID,CAMPAIGN_ID);
   
   ALTER TABLE MARKETING_CAMPAIGN_RULES ADD CONSTRAINT FK_MRKCMPR_MRKRUL FOREIGN KEY (RULE_ID) REFERENCES MARKETING_RULES(RULE_ID) ON DELETE CASCADE;
   ALTER TABLE MARKETING_CAMPAIGN_RULES ADD CONSTRAINT FK_MRKCMPR_MRKCMP FOREIGN KEY (CAMPAIGN_ID) REFERENCES MARKETING_CAMPAIGNS(CAMPAIGN_ID) ON DELETE CASCADE;
   
   
--OPPORTUNITIES:
CREATE TABLE OPPORTUNITIES
   (
   OPPORTUNITY_ID	 RAW(16) DEFAULT SYS_GUID() NOT NULL,
   ACCOUNT_ID RAW(16),    --FK TO ACCOUNTS
   CAMPAIGN_ID  RAW(16),    --FK TO MARKETING_CAMPAIGNS		TODO_FIX - CHECK THE RIGHT CAMPAIGNS TABLE - MAKE SURE
   CONTRACT_ID RAW(16)    --FK TO CONTRACTS
   );
   
   CREATE UNIQUE INDEX OPPORTUNITIES_PK ON OPPORTUNITIES (OPPORTUNITY_ID);
   ALTER TABLE OPPORTUNITIES ADD CONSTRAINT OPPORTUNITIES_PK PRIMARY KEY (OPPORTUNITY_ID);
   
   ALTER TABLE OPPORTUNITIES ADD CONSTRAINT FK_OPRT_ACC FOREIGN KEY (ACCOUNT_ID) REFERENCES ACCOUNTS(ACCOUNT_ID);
   ALTER TABLE OPPORTUNITIES ADD CONSTRAINT FK_OPRT_MRKCMP FOREIGN KEY (CAMPAIGN_ID) REFERENCES MARKETING_CAMPAIGNS(CAMPAIGN_ID);
   ALTER TABLE OPPORTUNITIES ADD CONSTRAINT FK_OPRT_CNTR FOREIGN KEY (CONTRACT_ID) REFERENCES CONTRACTS(CONTRACT_ID);
   
--QUOTES:
 CREATE TABLE QUOTES
   (
   QUOTE_ID	 RAW(16) DEFAULT SYS_GUID() NOT NULL,
   OPPORTUNITY_ID RAW(16),    --FK TO OPPORTUNITIES
   CONTACT_ID RAW(16)    --FK TO CONTACTS
   );
   
   CREATE UNIQUE INDEX QUOTES_PK ON QUOTES (QUOTE_ID);
   ALTER TABLE QUOTES ADD CONSTRAINT QUOTES_PK PRIMARY KEY (QUOTE_ID);
   
   ALTER TABLE QUOTES ADD CONSTRAINT FK_QUT_OPRT FOREIGN KEY (OPPORTUNITY_ID) REFERENCES OPPORTUNITIES(OPPORTUNITY_ID);
   ALTER TABLE QUOTES ADD CONSTRAINT FK_QUT_CON FOREIGN KEY (CONTACT_ID) REFERENCES CONTACTS(CONTACT_ID);
   
--INVOICES:
CREATE TABLE INVOICES
   (
   INVOICE_ID	 RAW(16) DEFAULT SYS_GUID() NOT NULL,
   ACCOUNT_ID RAW(16)    --FK TO ACCOUNTS
   );
   
   CREATE UNIQUE INDEX INVOICES_PK ON INVOICES (INVOICE_ID);
   ALTER TABLE INVOICES ADD CONSTRAINT INVOICES_PK PRIMARY KEY (INVOICE_ID);
   
   ALTER TABLE INVOICES ADD CONSTRAINT FK_INVC_ACC FOREIGN KEY (ACCOUNT_ID) REFERENCES ACCOUNTS(ACCOUNT_ID);
   
--INVOICEROWS:
CREATE TABLE INVOICE_ROWS
   (
   INVOICE_ID	 RAW(16) DEFAULT SYS_GUID() NOT NULL,
   ROW_NUMBER    NUMBER
   );
   
   CREATE UNIQUE INDEX INVOICE_ROWS_PK ON INVOICE_ROWS (INVOICE_ID,ROW_NUMBER);
   ALTER TABLE INVOICE_ROWS ADD CONSTRAINT INVOICE_ROWS_PK PRIMARY KEY (INVOICE_ID,ROW_NUMBER);
   
   ALTER TABLE INVOICE_ROWS ADD CONSTRAINT FK_INVCR_INVC FOREIGN KEY (INVOICE_ID) REFERENCES INVOICES(INVOICE_ID) ON DELETE CASCADE;
   
--LEADS:
CREATE TABLE LEADS
   (
   LEAD_ID	 RAW(16)  DEFAULT SYS_GUID() NOT NULL,
   CAMPAIGN_ID     RAW(16) NOT NULL,
   CONVERTED_ACCOUNT_ID     RAW(16),   --FK TO ACCOUNTS			- YUVAL WHY THE NAME CHANGE?
   CONVERTED_CONTACT_ID   RAW(16),   --FK TO CONTACTS
   CONVERTED_OPPORTUNITY_ID     RAW(16)     --FK TO OPPORTUNITIES
   );
   
   CREATE UNIQUE INDEX LEADS_PK ON LEADS (LEAD_ID);
   ALTER TABLE LEADS ADD CONSTRAINT LEADS_PK PRIMARY KEY (LEAD_ID);
   
   ALTER TABLE LEADS ADD CONSTRAINT FK_LEAD_MRKCMP FOREIGN KEY (CAMPAIGN_ID) REFERENCES MARKETING_CAMPAIGNS(CAMPAIGN_ID);
   ALTER TABLE LEADS ADD CONSTRAINT FK_LEAD_ASS FOREIGN KEY (CONVERTED_ACCOUNT_ID) REFERENCES ACCOUNTS(ACCOUNT_ID);
   ALTER TABLE LEADS ADD CONSTRAINT FK_LEAD_CON FOREIGN KEY (CONVERTED_CONTACT_ID) REFERENCES CONTACTS(CONTACT_ID);
   ALTER TABLE LEADS ADD CONSTRAINT FK_LEAD_OPRT FOREIGN KEY (CONVERTED_OPPORTUNITY_ID) REFERENCES OPPORTUNITIES(OPPORTUNITY_ID);
   
--MARKETINGLIST:
CREATE TABLE MARKETING_LIST
   (
   CAMPAIGN_ID	 RAW(16)  NOT NULL,
   CONTACT_ID     RAW(16) NOT NULL,
   LEAD_ID RAW(16)      --FK TO LEADS
   );
   
   CREATE UNIQUE INDEX MARKETING_LIST_PK ON MARKETING_LIST (CAMPAIGN_ID,CONTACT_ID);
   ALTER TABLE MARKETING_LIST ADD CONSTRAINT MARKETING_LIST_PK PRIMARY KEY (CAMPAIGN_ID,CONTACT_ID);
   
   ALTER TABLE MARKETING_LIST ADD CONSTRAINT FK_MRKL_MRKCMP FOREIGN KEY (CAMPAIGN_ID) REFERENCES MARKETING_CAMPAIGNS(CAMPAIGN_ID);
   ALTER TABLE MARKETING_LIST ADD CONSTRAINT FK_MRKL_CON FOREIGN KEY (CONTACT_ID) REFERENCES CONTACTS(CONTACT_ID);
   ALTER TABLE MARKETING_LIST ADD CONSTRAINT FK_MRKL_LEAD FOREIGN KEY (LEAD_ID) REFERENCES LEADS(LEAD_ID);
   
----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------
--ADMIN ENTITIES------------------------------------------------------------------------
----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------
--PERMISSIONS:
 CREATE TABLE PERMISSIONS
   (
   PERMISSION_ID	 RAW(16) DEFAULT SYS_GUID()  NOT NULL,
   PERMISSION_MASK      VARCHAR2(256)
   );
   
   CREATE UNIQUE INDEX PERMISSIONS_PK ON PERMISSIONS (PERMISSION_ID);
   ALTER TABLE PERMISSIONS ADD CONSTRAINT PERMISSIONS_PK PRIMARY KEY (PERMISSION_ID);
   
--ROLEPERMISSIONS:
CREATE TABLE ROLE_PERMISSIONS
   (
   ROLE_ID      RAW(16) NOT NULL,   --FK TO ROLES
   PERMISSION_ID	 RAW(16)   NOT NULL   --FK TO PERMISSIONS
   );
   
   CREATE UNIQUE INDEX ROLE_PERMISSIONS_PK ON ROLE_PERMISSIONS (ROLE_ID,PERMISSION_ID);
   ALTER TABLE ROLE_PERMISSIONS ADD CONSTRAINT ROLE_PERMISSIONS_PK PRIMARY KEY (ROLE_ID,PERMISSION_ID);
   
   ALTER TABLE ROLE_PERMISSIONS ADD CONSTRAINT FK_RLPM_ROL FOREIGN KEY (ROLE_ID) REFERENCES ROLES(ROLE_ID) ON DELETE CASCADE;
   ALTER TABLE ROLE_PERMISSIONS ADD CONSTRAINT FK_RLPM_PRM FOREIGN KEY (PERMISSION_ID) REFERENCES PERMISSIONS(PERMISSION_ID) ON DELETE CASCADE;
   
--USERS:
CREATE TABLE USERS
   (
   USER_ID      RAW(16) DEFAULT SYS_GUID() NOT NULL,
   OPERATOR_ID    RAW(16),   --FK TO OPERATORS
   DEFAULT_ROLE   RAW(16),   --FK TO ROLES
   IS_TEAM      NCHAR(10),
   DB_DELETED  VARCHAR2(1)  DEFAULT '0'
   );
   
   CREATE UNIQUE INDEX USERS_PK ON USERS (USER_ID);
   ALTER TABLE USERS ADD CONSTRAINT USERS_PK PRIMARY KEY (USER_ID);
   
   ALTER TABLE USERS ADD CONSTRAINT FK_USR_OPR  FOREIGN KEY (OPERATOR_ID) REFERENCES OPERATORS(OPERATOR_ID);
   ALTER TABLE USERS ADD CONSTRAINT FK_USR_ROL FOREIGN KEY (DEFAULT_ROLE) REFERENCES ROLES(ROLE_ID);

--USERROLES:
CREATE TABLE USER_ROLES
   (
   USER_ID      RAW(16)  NOT NULL,
   ROLE_ID   RAW(16) NOT NULL   --FK TO ROLES
   );
   
   CREATE UNIQUE INDEX USER_ROLES_PK ON USER_ROLES (USER_ID,ROLE_ID);
   ALTER TABLE USER_ROLES ADD CONSTRAINT USER_ROLES_PK PRIMARY KEY (USER_ID,ROLE_ID);
   
   ALTER TABLE USER_ROLES ADD CONSTRAINT FK_USRROL_USR  FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE;
   ALTER TABLE USER_ROLES ADD CONSTRAINT FK_USRROL_ROL FOREIGN KEY (ROLE_ID) REFERENCES ROLES(ROLE_ID) ON DELETE CASCADE;

--USERTEAMS:
CREATE TABLE USER_TEAMS
   (
   TEAM_ID      RAW(16)  NOT NULL,    --FK TO USERS
   USER_ID   RAW(16) NOT NULL   --FK TO USERS
   );
   
   CREATE UNIQUE INDEX USER_TEAMS_PK ON USER_TEAMS (TEAM_ID,USER_ID);
   ALTER TABLE USER_TEAMS ADD CONSTRAINT USER_TEAMS_PK PRIMARY KEY (TEAM_ID,USER_ID);
   
   ALTER TABLE USER_TEAMS ADD CONSTRAINT FK_USRTEAM_USR_USR  FOREIGN KEY (TEAM_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE;
   ALTER TABLE USER_TEAMS ADD CONSTRAINT FK_USRTEAM_TEAM_USR FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE;
   
--USERCREDENTIALS:
CREATE TABLE USER_CREDENTIALS
   (
   USER_ID   RAW(16) NOT NULL,   --FK TO USERS
   LOGIN_NAME     NVARCHAR2(64),
   USER_PASSWORD    NVARCHAR2(64),
   SECRET_QUESTION1     NVARCHAR2(256),
   SECRET_ANSWER1     NVARCHAR2(256),
   SECRET_QUESTION2     NVARCHAR2(256),
   SECRET_ANSWER2     NVARCHAR2(256)
   );
   
   CREATE UNIQUE INDEX USER_CREDENTIALS_PK ON USER_CREDENTIALS (USER_ID);
   ALTER TABLE USER_CREDENTIALS ADD CONSTRAINT USER_CREDENTIALS_PK PRIMARY KEY (USER_ID);
   
   ALTER TABLE USER_CREDENTIALS ADD CONSTRAINT FK_USRCRD_USR  FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE;
   

----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------
--SEQUNCES & TRIGGERS-------------------------------------------------------------------
----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------
--RESOURCES:
CREATE SEQUENCE RESOURCES_SEQ 
START WITH 1 
INCREMENT BY 1 
NOMAXVALUE; 

CREATE TRIGGER RESOURCES_TRIGGER
BEFORE INSERT  OR UPDATE ON RESOURCES
FOR EACH ROW
BEGIN
SELECT RESOURCES_SEQ.NEXTVAL
           INTO :NEW.DB_VERSION
           FROM DUAL;
END;
/

--ACCOUNTS:
CREATE SEQUENCE ACCOUNTS_SEQ 
START WITH 1 
INCREMENT BY 1 
NOMAXVALUE; 

CREATE TRIGGER ACCOUNTS_TRIGGER
BEFORE INSERT  OR UPDATE ON ACCOUNTS
FOR EACH ROW
BEGIN
SELECT ACCOUNTS_SEQ.NEXTVAL
           INTO :NEW.DB_VERSION
           FROM DUAL;
END;
/

--CONTACTS:
CREATE SEQUENCE CONTACTS_SEQ 
START WITH 1 
INCREMENT BY 1 
NOMAXVALUE; 

CREATE TRIGGER CONTACTS_TRIGGER
BEFORE INSERT  OR UPDATE ON CONTACTS
FOR EACH ROW
BEGIN
SELECT CONTACTS_SEQ.NEXTVAL
           INTO :NEW.DB_VERSION
           FROM DUAL;
END;
/

--PLATFORMS:
CREATE SEQUENCE PLATFORMS_SEQ 
START WITH 1 
INCREMENT BY 1 
NOMAXVALUE; 

CREATE TRIGGER PLATFORMS_TRIGGER
BEFORE INSERT  OR UPDATE ON PLATFORMS
FOR EACH ROW
BEGIN
SELECT PLATFORMS_SEQ.NEXTVAL
           INTO :NEW.DB_VERSION
           FROM DUAL;
END;
/

--DEVICES:
CREATE SEQUENCE DEVICES_SEQ 
START WITH 1 
INCREMENT BY 1 
NOMAXVALUE; 

CREATE TRIGGER DEVICES_TRIGGER
BEFORE INSERT  OR UPDATE ON DEVICES
FOR EACH ROW
BEGIN
SELECT DEVICES_SEQ.NEXTVAL
           INTO :NEW.DB_VERSION
           FROM DUAL;
END;
/

--VEHICLES:
CREATE SEQUENCE VEHICLES_SEQ 
START WITH 1 
INCREMENT BY 1 
NOMAXVALUE; 

CREATE TRIGGER VEHICLES_TRIGGER
BEFORE INSERT  OR UPDATE ON VEHICLES
FOR EACH ROW
BEGIN
SELECT VEHICLES_SEQ.NEXTVAL
           INTO :NEW.DB_VERSION
           FROM DUAL;
END;
/

--VEHICLEMETRICS:
CREATE SEQUENCE VEHICLE_METRICS_SEQ 
START WITH 1 
INCREMENT BY 1 
NOMAXVALUE; 

CREATE TRIGGER VEHICLE_METRICS_TRIGGER
BEFORE INSERT  OR UPDATE ON VEHICLE_METRICS
FOR EACH ROW
BEGIN
SELECT VEHICLE_METRICS_SEQ.NEXTVAL
           INTO :NEW.DB_VERSION
           FROM DUAL;
END;
/

--TRAFFICEVENTS:
CREATE SEQUENCE TRAFFIC_EVENTS_SEQ 
START WITH 1 
INCREMENT BY 1 
NOMAXVALUE; 

CREATE TRIGGER TRAFFIC_EVENTS_TRIGGER
BEFORE INSERT  OR UPDATE ON TRAFFIC_EVENTS
FOR EACH ROW
BEGIN
SELECT TRAFFIC_EVENTS_SEQ.NEXTVAL
           INTO :NEW.DB_VERSION
           FROM DUAL;
END;
/

--SPEEDCAMERAS:
CREATE SEQUENCE SPEED_CAMERAS_SEQ 
START WITH 1 
INCREMENT BY 1 
NOMAXVALUE; 

CREATE TRIGGER SPEED_CAMERAS_TRIGGER
BEFORE INSERT  OR UPDATE ON SPEED_CAMERAS
FOR EACH ROW
BEGIN
SELECT SPEED_CAMERAS_SEQ.NEXTVAL
           INTO :NEW.DB_VERSION
           FROM DUAL;
END;
/

--APPLICATIONS:
CREATE SEQUENCE APPLICATIONS_SEQ 
START WITH 1 
INCREMENT BY 1 
NOMAXVALUE; 

CREATE TRIGGER APPLICATIONS_TRIGGER
BEFORE INSERT  OR UPDATE ON APPLICATIONS
FOR EACH ROW
BEGIN
SELECT APPLICATIONS_SEQ.NEXTVAL
           INTO :NEW.DB_VERSION
           FROM DUAL;
END;
/

--PLACES:
CREATE SEQUENCE PLACES_SEQ 
START WITH 1 
INCREMENT BY 1 
NOMAXVALUE; 

CREATE TRIGGER PLACES_TRIGGER
BEFORE INSERT  OR UPDATE ON PLACES
FOR EACH ROW
BEGIN
SELECT PLACES_SEQ.NEXTVAL
           INTO :NEW.DB_VERSION
           FROM DUAL;
END;
/

--DESTINATIONS:
CREATE SEQUENCE DESTINATIONS_SEQ 
START WITH 1 
INCREMENT BY 1 
NOMAXVALUE; 

CREATE TRIGGER DESTINATIONS_TRIGGER
BEFORE INSERT  OR UPDATE ON DESTINATIONS
FOR EACH ROW
BEGIN
SELECT DESTINATIONS_SEQ.NEXTVAL
           INTO :NEW.DB_VERSION
           FROM DUAL;
END;
/

--ROUTES:
CREATE SEQUENCE ROUTES_SEQ 
START WITH 1 
INCREMENT BY 1 
NOMAXVALUE; 

CREATE TRIGGER ROUTES_TRIGGER
BEFORE INSERT  OR UPDATE ON ROUTES
FOR EACH ROW
BEGIN
SELECT ROUTES_SEQ.NEXTVAL
           INTO :NEW.DB_VERSION
           FROM DUAL;
END;
/

